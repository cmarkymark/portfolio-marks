[["index.html", "Aim #2: Mathematical Model Chapter 1 In This Book", " Aim #2: Mathematical Model Charles Marks 2021-04-16 Chapter 1 In This Book In this book, you will find all the code necessary to replicate the findings from Aim #2 of Charles Markss dissertation. This document is intended to be shared as a supplement to both the dissertation and potential manuscripts which are built off of this work. "],["dataset.html", "Chapter 2 Generating the Initial Dataset 2.1 Participants 2.2 Defining Variables We Wish to Capture 2.3 Loading the Necessary Datasets 2.4 Iterating Through the Datasets 2.5 Factoring the Data 2.6 Adding the Weights and Replicate Weights to the Study 2.7 Save the Data Frame for Future Use", " Chapter 2 Generating the Initial Dataset In this Chapter, you will find the code that was used to generate the initial (unimputed) dataset for this study. Datasets from the Population Assessment of Tobacco and Health are available from INSERT URL and the names of the files in this chapter correspond to the files you would use from the public use files. 2.1 Participants For this study, we wanted data for all participants who responded to the adult questionnaire at Waves 1 - 3 of the PATH Study. We began by loading in the Master document (0001) which has information for every participant and which surveys the responded to. As such, we loaded the dataset and only included individuals who responded to the adult questionaire at Waves 1 - 3. In total, 23,670 individuals were included in this data set. ## Load the data load(&quot;PATH Data/ICPSR_36498/DS0001/36498-0001-Data.rda&quot;) ## Save with a name that is a bit easier to use data &lt;- da36498.0001 ## Convert the ID value from a string to numeric -- this is to simplify records matching data$ID &lt;- as.numeric(substring(data$PERSONID,2)) ## Subset to only include individuals who responded to the first three waves adult questionnaire data &lt;- data[data$WAVE1_INTERVIEW == &quot;(1) 1 = Adult&quot; &amp; data$WAVE2_INTERVIEW == &quot;(1) 1 = Adult&quot; &amp; data$WAVE3_INTERVIEW == &quot;(1) 1 = Adult&quot;,] 2.2 Defining Variables We Wish to Capture Next, we define the variables we wish to capture in our dataset. We are going to need to go through datasets for each of the 1st 3 waves of the study, so we are going to use our data data.frame from the master file to store these variables and use as our working dataset. We want to capture: Age (@ each Wave) Sex (Note that it is coded as gender in the code  technically the measurement is for Sex tho) Race Hispanic Ethnicity Income (@ Waves 1 - 3) Current Cigarette Smoking Status (@ Waves 1 - 3) Former Cigarette Smoking Status (@ Waves 1 - 3) Current E-Cigarette Use Status (@ Waves 1 - 3) Former E-Cigarette Use Status (@ Waves 1 - 3) ### ### We are just going to add an income category for each participant ### data$gender &lt;- NA data$race &lt;- NA data$hispanic &lt;- NA data$wave1_income &lt;- NA data$wave2_income &lt;- NA data$wave3_income &lt;- NA data$wave1_age &lt;- NA data$wave2_age &lt;- NA data$wave3_age &lt;- NA data$wave1_smoker &lt;- NA data$wave2_smoker &lt;- NA data$wave3_smoker &lt;- NA data$wave1_e_smoker &lt;- NA data$wave2_e_smoker &lt;- NA data$wave3_e_smoker &lt;- NA data$wave1_former_smoker &lt;- NA data$wave2_former_smoker &lt;- NA data$wave3_former_smoker &lt;- NA data$wave1_former_e_smoker &lt;- NA data$wave2_former_e_smoker &lt;- NA data$wave3_former_e_smoker &lt;- NA 2.3 Loading the Necessary Datasets Next, we will load the datasets corresponding to the Waves 1 - 3 Adult Surveys load(&quot;PATH Data/ICPSR_36498/DS1001/36498-1001-Data.rda&quot;) ## Load the dataset wave1_adult &lt;- da36498.1001 ## Give it an easier name to work with wave1_adult$ID &lt;- as.numeric(substring(wave1_adult$PERSONID,2)) ## Convert the ID to a numeric value so can easily merge datapoints load(&quot;PATH Data/ICPSR_36498/DS2001/36498-2001-Data.rda&quot;) wave2_adult &lt;- da36498.2001 wave2_adult$ID &lt;- as.numeric(substring(wave2_adult$PERSONID,2)) load(&quot;PATH Data/ICPSR_36498/DS3001/36498-3001-Data.rda&quot;) wave3_adult &lt;- da36498.3001 wave3_adult$ID &lt;- as.numeric(substring(wave3_adult$PERSONID,2)) 2.4 Iterating Through the Datasets Next we will iterate through our master data data.frame and for each participant we will collect the needed information. ## We will loop through each participant in the master file ## We will collect each piece of information we need and merge into this dataset for(i in 1:nrow(data)){ ## First we get the participant ID for getting needed Data ID &lt;- data$ID[i] ## First we go through the Wave 1 Dataset ## First we extract age age &lt;- wave1_adult$R01R_A_AGECAT7[wave1_adult$ID == ID] ## In the Path Study, the first several waves calculated age as a 7 category variable ## In later waves they merged the 65-74 year old and 75+ category into a single 65+ category ## As such we need to take anyone whose age value == 7 (i.e 75+) and change the value to 6 (i.e. 65+) if(!is.na(age) &amp;&amp; length(age) &gt; 0 &amp;&amp; age == 7){ age &lt;- 6} ## Then we save this value if(!is.na(age) &amp;&amp; length(age) &gt; 0) { data$wave1_age[i] &lt;- age } ## Capture income data$wave1_income[i] &lt;- wave1_adult$R01R_A_AM0030[wave1_adult$ID == ID] ## Capture gender data$gender[i] &lt;- wave1_adult$R01R_A_SEX[wave1_adult$ID == ID] ## Capture race data$race[i] &lt;- wave1_adult$R01R_A_RACECAT3[wave1_adult$ID == ID] ## Capture Hispanic Ethnicity data$hispanic[i] &lt;- wave1_adult$R01R_A_HISP[wave1_adult$ID == ID] ## Capture Current Smoking Status data$wave1_smoker[i] &lt;- wave1_adult$R01R_A_CUR_ESTD_CIGS[wave1_adult$ID == ID] ## Capture Former Smoking Status data$wave1_former_smoker[i] &lt;- wave1_adult$R01R_A_FMR_ESTD_CIGS[wave1_adult$ID == ID] ## Capture Current E-Cigarette Use Status data$wave1_e_smoker[i] &lt;- wave1_adult$R01R_A_CUR_ESTD_ECIG[wave1_adult$ID == ID] ## Capture Former E-Cigarette Use Status data$wave1_former_e_smoker[i] &lt;- wave1_adult$R01R_A_FMR_ESTD_ECIG[wave1_adult$ID == ID] ## ## We repeat this process for Wave 2 ## Comments are included to indicate differences from Wave 1 extraction ## age &lt;- wave2_adult$R02R_A_AGECAT7[wave2_adult$ID == ID] if(!is.na(age) &amp;&amp; length(age) &gt; 0 &amp;&amp; age == 7){ age &lt;- 6} if(!is.na(age) &amp;&amp; length(age) &gt; 0) { data$wave2_age[i] &lt;- age } data$wave2_income[i] &lt;- wave2_adult$R02R_A_AM0030[wave2_adult$ID == ID] ## We only need the gender/sex value for one wave ## This if statement instructs R to get the wave 2 gender if the wave 1 gender was missing if(is.na(data$gender[i])){ data$gender[i] &lt;- wave2_adult$R02R_A_SEX[wave2_adult$ID == ID] } ## We only need the race value for one wave ## This if statement instructs R to get the wave 2 race if the wave 1 race was missing if(is.na(data$race[i])){ data$race[i] &lt;- wave2_adult$R02R_A_RACECAT3[wave2_adult$ID == ID] } ## We only need the ethnicity value for one wave ## This if statement instructs R to get the wave 2 ethnicity if the wave 1 ethnicity was missing if(is.na(data$hispanic[i])){ data$hispanic[i] &lt;- wave2_adult$R02R_A_HISP[wave2_adult$ID == ID] } data$wave2_smoker[i] &lt;- wave2_adult$R02R_A_CUR_ESTD_CIGS[wave2_adult$ID == ID] data$wave2_former_smoker[i] &lt;- wave2_adult$R02R_A_FMR_ESTD_CIGS_REV[wave2_adult$ID == ID] data$wave2_e_smoker[i] &lt;- wave2_adult$R02R_A_CUR_ESTD_ECIG[wave2_adult$ID == ID] data$wave2_former_e_smoker[i] &lt;- wave2_adult$R02R_A_FMR_ESTD_ECIG[wave2_adult$ID == ID] ## Finally, we capture Wave 3 age &lt;- wave3_adult$R03R_A_AGECAT7[wave3_adult$ID == ID] if(!is.na(age) &amp;&amp; length(age) &gt; 0 &amp;&amp; age == 7){ age &lt;- 6} if(!is.na(age) &amp;&amp; length(age) &gt; 0) { data$wave3_age[i] &lt;- age } data$wave3_income[i] &lt;- wave3_adult$R03R_A_AM0030[wave3_adult$ID == ID] if(is.na(data$gender[i])){ data$gender[i] &lt;- wave3_adult$R03R_A_SEX[wave3_adult$ID == ID] } if(is.na(data$race[i])){ data$race[i] &lt;- wave3_adult$R03R_A_RACECAT3[wave3_adult$ID == ID] } if(is.na(data$hispanic[i])){ data$hispanic[i] &lt;- wave3_adult$R03R_A_HISP[wave3_adult$ID == ID] } data$wave3_smoker[i] &lt;- wave3_adult$R03R_A_CUR_ESTD_CIGS[wave3_adult$ID == ID] data$wave3_former_smoker[i] &lt;- wave3_adult$R03R_A_FMR_ESTD_CIGS_REV[wave3_adult$ID == ID] data$wave3_e_smoker[i] &lt;- wave3_adult$R03R_A_CUR_ESTD_EPRODS[wave3_adult$ID == ID] data$wave3_former_e_smoker[i] &lt;- wave3_adult$R03R_A_FMR_ESTD_EPRODS_REV[wave3_adult$ID == ID] } 2.5 Factoring the Data Next, we want to assign the numeric values of categorical variables (all the variables of interest are categorical) to the correct factor level. data$wave1_income &lt;- factor(data$wave1_income, levels = c(1,2,3,4,5), labels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) data$wave2_income &lt;- factor(data$wave2_income, levels = c(1,2,3,4,5), labels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) data$wave3_income &lt;- factor(data$wave3_income, levels = c(1,2,3,4,5), labels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) data$wave1_age &lt;- factor(data$wave1_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;&gt;65&quot;)) data$wave2_age &lt;- factor(data$wave2_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;&gt;65&quot;)) data$wave3_age &lt;- factor(data$wave3_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;&gt;65&quot;)) data$gender &lt;- factor(data$gender, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) data$race &lt;- factor(data$race, levels = c(1,2,3), labels = c(&quot;White&quot;,&quot;Black&quot;,&quot;Other&quot;)) data$hispanic &lt;- factor(data$hispanic, levels = c(1,2), labels = c(&quot;Hispanic&quot;,&quot;Not Hispanic&quot;)) data$wave1_smoker &lt;- factor(data$wave1_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave1_former_smoker &lt;- factor(data$wave1_former_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave1_e_smoker &lt;- factor(data$wave1_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave1_former_e_smoker &lt;- factor(data$wave1_former_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave2_smoker &lt;- factor(data$wave2_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave2_former_smoker &lt;- factor(data$wave2_former_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave2_e_smoker &lt;- factor(data$wave2_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave2_former_e_smoker &lt;- factor(data$wave2_former_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave3_smoker &lt;- factor(data$wave3_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave3_former_smoker &lt;- factor(data$wave3_former_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave3_e_smoker &lt;- factor(data$wave3_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) data$wave3_former_e_smoker &lt;- factor(data$wave3_former_e_smoker, levels = c(1,2), labels = c(&quot;Yes&quot;,&quot;No&quot;)) 2.6 Adding the Weights and Replicate Weights to the Study The PATH Study is intended to be representative of the US population. They provide a set of weights and replicate weights which can be applied to the participants who responded to Waves 1 - 3 of the adult survey. For future analyses, these weights need to be saved with their participants. ## Load the file with the Waves 1 - 3 longitduinal weights load(&quot;PATH Data/ICPSR_36498/DS3101/36498-3101-Data.rda&quot;) ## Provide an easy to use name weights &lt;- da36498.3101 ## Convert the ID value to numeric to allow data merging weights$ID &lt;- as.numeric(substring(weights$PERSONID,2)) ## We are going to remove columns 1 - 4 of this dataset because this information is not needed for our analyses weights &lt;- weights[,-c(1:4)] ## Finally we merge the weights into our master data data.frame by ID ## This essentially binds the columns of weights onto the data data.frame, matching rows up by ID data &lt;- merge(data,weights, by = c(&quot;ID&quot;)) 2.7 Save the Data Frame for Future Use write.csv(data, &quot;Data/PATH_Waves_1-3.csv&quot;) You can write citations, too. For example, we are using the bookdown package [@R-bookdown] in this sample book, which was built on top of R Markdown and knitr [@xie2015]. "],["imputation.html", "Chapter 3 Data Imputation 3.1 Loading Libraries and the Data 3.2 Heuristic Imputation of Income 3.3 Heuristic Imputation of Former Cig/E-Cig Use 3.4 Imputation with mice() 3.5 Generating Some Additional Variables 3.6 Output the Imputed Dataset", " Chapter 3 Data Imputation Next we need to impute missing data values. We shall do this in a two-step procedure. In the first step, we will undertake a heuristic imputation of former cigarette/e-cigarette use and for income. In this dataset, a majority of missing data is due to the former cig/e-cig variables and the income variables (about 1,000 missing of each at each Wave). We will describe these steps in greater detail below. 3.1 Loading Libraries and the Data As part of our imputation, we will use the mice library in R. In addition, we need to load the dataset generated in the previous chapter. ## Load the mice library ## If you haven&#39;t downloaded it, you will need to install it library(mice) ## Load the dataset -- remove the first column as it will just be a numeric index data &lt;- read.csv(&quot;Data/PATH_Waves_1-3.csv&quot;, header = T)[,-c(1)] 3.2 Heuristic Imputation of Income First, we are going to undertake a heuristic imputation for missing income values. We are making the assumption that if we know a persons income at Wave X, then this is the best guess for their missing income value at Wave Y. To the best of our ability, we want to avoid imputing based on relationships between the variables, as that may influence our regression and modeling results in unintended ways. In total, 391 participants had missing income data from all 3 waves which could not be imputed via this method. ## Loop through each participant one at a time for(i in 1:nrow(data)){ ## First we extract the income level at each wave ## Missing data will show up as an NA wave1_inc &lt;- data$wave1_income[i] wave2_inc &lt;- data$wave2_income[i] wave3_inc &lt;- data$wave3_income[i] ## If the Wave 1 data is missing: if(is.na(wave1_inc)){ ## First check if Wave 2 data is available, if so, set the Wave 1 value to equal Wave 2&#39;s if(!is.na(wave2_inc)){ data$wave1_income[i] &lt;- wave2_inc ## If the Wave 2 data is also missing, check Wave 3 and set Wave 1 equal to the Wave 3 value }else if(!is.na(wave3_inc)){ data$wave1_income[i] &lt;- wave3_inc } } ## We shall repeat a similar process for Wave 2 ## If Wave 2 income value is NA: if(is.na(wave2_inc)){ ## First we will check Wave 3 if(!is.na(wave3_inc)){ data$wave2_income[i] &lt;- wave3_inc ## If the Wave 3 value is NA, then we will check the Wave 1 value }else if(!is.na(wave1_inc)){ data$wave2_income[i] &lt;- wave1_inc } } ## Finally, we repeat this process for Wave 3 ## If Wave 3 value is NA: if(is.na(wave3_inc)){ ## Check the Wave 2 value if(!is.na(wave2_inc)){ data$wave3_income[i] &lt;- wave2_inc ## Else if Wave 2 is also NA, we will check the Wave 1 value }else if(!is.na(wave1_inc)){ data$wave3_income[i] &lt;- wave1_inc } } } 3.3 Heuristic Imputation of Former Cig/E-Cig Use The PATH Study computes former use based on a series of questions. The bar for concluding former use is higher than for concluding current use, as such they reported a greater number of missing former values than current. But, we can hope to derive best estimates for former values by looking at previous waves. We are only interested in imputing former status at Waves 2 and 3 (we dont use Wave 1 values in our study). For example, someone who reports Current Use at Wave 1 but no Current Use at Wave 2, should be classified as a former smoker. We generated a series of rules for imputation to try to capture each of these potential imputation pathways when former use status was missing for a given Wave X (either Wave 2 or 3): If an individual reports former smoking at Wave X - 1 and no current smoking at Wave X, then they are labeled as former smoking at Wave X If an individuals reports no former smoking at Wave X - 1 and no current smoking at Wave X, then they are labeled as no former smoking at Wave X If an individuals reports current smoking at Wave X, then they are labeled as no former smoking at Wave X (as they are current) ## We will go through each participant one by one for(i in 1:nrow(data)){ ## We want to extract needed information ## First we extract current and former use status for cigarettes at Waves 1 - 3 wave1_current &lt;- data$wave1_smoker[i] wave1_former &lt;- data$wave1_former_smoker[i] wave2_current &lt;- data$wave2_smoker[i] wave2_former &lt;- data$wave2_former_smoker[i] wave3_current &lt;- data$wave3_smoker[i] wave3_former &lt;- data$wave3_former_smoker[i] ## Next we extract current and former e-cigarette use status at Waves 1 - 3 wave1_e_current &lt;- data$wave1_e_smoker[i] wave1_e_former &lt;- data$wave1_former_e_smoker[i] wave2_e_current &lt;- data$wave2_e_smoker[i] wave2_e_former &lt;- data$wave2_former_e_smoker[i] wave3_e_current &lt;- data$wave3_e_smoker[i] wave3_e_former &lt;- data$wave3_former_e_smoker[i] ## First we will impute former cigarette use at Wave 2 if(is.na(wave2_former)){ ## Scenario 1 if(!is.na(wave1_former) &amp;&amp; !is.na(wave2_current) &amp;&amp; wave1_former == &quot;Yes&quot; &amp;&amp; wave2_current == &quot;No&quot;){ data$wave2_former_smoker[i] &lt;- &quot;Yes&quot; wave2_former &lt;- &quot;Yes&quot; ## Scenario 2 }else if(!is.na(wave1_former) &amp;&amp; !is.na(wave2_current) &amp;&amp; wave1_former == &quot;No&quot; &amp;&amp; wave2_current == &quot;No&quot;){ data$wave2_former_smoker[i] &lt;- &quot;No&quot; wave2_former &lt;- &quot;No&quot; ## Scenario 3.1 }else if(!is.na(wave1_former) &amp;&amp; !is.na(wave2_current) &amp;&amp; wave1_former == &quot;Yes&quot; &amp;&amp; wave2_current == &quot;Yes&quot;){ data$wave2_former_smoker[i] &lt;- &quot;No&quot; wave2_former &lt;- &quot;No&quot; ## Scenario 3.2 }else if(!is.na(wave1_former) &amp;&amp; !is.na(wave2_current) &amp;&amp; wave1_former == &quot;No&quot; &amp;&amp; wave2_current == &quot;Yes&quot;){ data$wave2_former_smoker[i] &lt;- &quot;No&quot; wave2_former &lt;- &quot;No&quot; } } ## Next we repeat the process for Wave 3 if(is.na(wave3_former)){ if(!is.na(wave2_former) &amp;&amp; !is.na(wave3_current) &amp;&amp; wave2_former == &quot;Yes&quot; &amp;&amp; wave3_current == &quot;No&quot;){ data$wave3_former_smoker[i] &lt;- &quot;Yes&quot; }else if(!is.na(wave2_former) &amp;&amp; !is.na(wave3_current) &amp;&amp; wave2_former == &quot;No&quot; &amp;&amp; wave3_current == &quot;No&quot;){ data$wave3_former_smoker[i] &lt;- &quot;No&quot; }else if(!is.na(wave2_former) &amp;&amp; !is.na(wave3_current) &amp;&amp; wave2_former == &quot;Yes&quot; &amp;&amp; wave3_current == &quot;Yes&quot;){ data$wave3_former_smoker[i] &lt;- &quot;No&quot; }else if(!is.na(wave2_former) &amp;&amp; !is.na(wave3_current) &amp;&amp; wave2_former == &quot;No&quot; &amp;&amp; wave3_current == &quot;Yes&quot;){ data$wave3_former_smoker[i] &lt;- &quot;No&quot; } } ## We then, similarly, repeat this process for the e-cigarette values as well ## First, we impute for Wave 2 if(is.na(wave2_e_former)){ if(!is.na(wave1_e_former) &amp;&amp; !is.na(wave2_e_current) &amp;&amp; wave1_e_former == &quot;Yes&quot; &amp;&amp; wave2_e_current == &quot;No&quot;){ data$wave2_former_e_smoker[i] &lt;- &quot;Yes&quot; wave2_e_former &lt;- &quot;Yes&quot; }else if(!is.na(wave1_e_former) &amp;&amp; !is.na(wave2_e_current) &amp;&amp; wave1_e_former == &quot;No&quot; &amp;&amp; wave2_e_current == &quot;No&quot;){ data$wave2_former_e_smoker[i] &lt;- &quot;No&quot; wave2_e_former &lt;- &quot;No&quot; }else if(!is.na(wave1_e_former) &amp;&amp; !is.na(wave2_e_current) &amp;&amp; wave1_e_former == &quot;Yes&quot; &amp;&amp; wave2_e_current == &quot;Yes&quot;){ data$wave2_former_e_smoker[i] &lt;- &quot;No&quot; wave2_e_former &lt;- &quot;No&quot; }else if(!is.na(wave1_e_former) &amp;&amp; !is.na(wave2_e_current) &amp;&amp; wave1_e_former == &quot;No&quot; &amp;&amp; wave2_e_current == &quot;Yes&quot;){ data$wave2_former_e_smoker[i] &lt;- &quot;No&quot; wave2_e_former &lt;- &quot;No&quot; } } ## Next we impute for Wave 3 if(is.na(wave3_e_former)){ if(!is.na(wave2_e_former) &amp;&amp; !is.na(wave3_e_current) &amp;&amp; wave2_e_former == &quot;Yes&quot; &amp;&amp; wave3_e_current == &quot;No&quot;){ data$wave3_former_e_smoker[i] &lt;- &quot;Yes&quot; }else if(!is.na(wave2_e_former) &amp;&amp; !is.na(wave3_e_current) &amp;&amp; wave2_e_former == &quot;No&quot; &amp;&amp; wave3_e_current == &quot;No&quot;){ data$wave3_former_e_smoker[i] &lt;- &quot;No&quot; }else if(!is.na(wave2_e_former) &amp;&amp; !is.na(wave3_e_current) &amp;&amp; wave2_e_former == &quot;Yes&quot; &amp;&amp; wave3_e_current == &quot;Yes&quot;){ data$wave3_former_e_smoker[i] &lt;- &quot;No&quot; }else if(!is.na(wave2_e_former) &amp;&amp; !is.na(wave3_e_current) &amp;&amp; wave2_e_former == &quot;No&quot; &amp;&amp; wave3_e_current == &quot;Yes&quot;){ data$wave3_former_e_smoker[i] &lt;- &quot;No&quot; } } } 3.4 Imputation with mice() Now that we have imputed many of the missing income and former use variables, we want to impute all the remaining missing values. We will use the mice (Multivariate Imputation by Chained Equations) package to do so. The mice package can be used to generate multiple imputed datasets. By doing so, we are able to run the analyses on each imputed dataset and then pool the results. This allows us to account for uncertainty introduced by the imputation process. We have opted to create 15 such imputed datasets. ## First we create a temporary data frame with just the variables we wish to impute temp &lt;- data[,c(&quot;wave2_age&quot;, &quot;gender&quot;, &quot;race&quot;,&quot;hispanic&quot;, &quot;wave1_income&quot;,&quot;wave2_income&quot;,&quot;wave3_income&quot;, &quot;wave2_smoker&quot;,&quot;wave2_former_smoker&quot;, &quot;wave2_e_smoker&quot;,&quot;wave2_former_e_smoker&quot;, &quot;wave3_smoker&quot;,&quot;wave3_former_smoker&quot;, &quot;wave3_e_smoker&quot;,&quot;wave3_former_e_smoker&quot;)] ## While our variables are all categorical, some of them are ordered. It is important to let the mice() function know which categorical variables are ordered. We use the ordered function to do so. temp$wave2_age &lt;- ordered(temp$wave2_age, levels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;&gt;65&quot;)) temp$wave1_income &lt;- ordered(temp$wave1_income, levels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) temp$wave2_income &lt;- ordered(temp$wave2_income, levels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) temp$wave3_income &lt;- ordered(temp$wave3_income, levels = c(&quot;&lt;$10k&quot;,&quot;$10-25k&quot;,&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)) ## Once variables are in correct format, we run the mice function. ## We run it 15 times (m = 15) ## We set a seed as well so that the results are replicable temp &lt;- mice(temp, m = 15, seed = 123) ## We then extract the results in long format ## The com dataset is thus 15 imputed datasets on top of each other ## The .imp variable for each observation corresponds to which imputation a given observation belongs to com &lt;- complete(temp, action=&quot;long&quot;) ## We then want to add the weights and replicate weights back to the dataset ## These weights are contained in columns 38 - 138 of the original dataset ## The com dataset is 15 times as long as the data data.frame ## The cbind function nicley repeats the weights, such that they are correctly applied to each imputed dataset com &lt;- cbind(com, data[,c(37:137)]) 3.5 Generating Some Additional Variables 3.5.1 3-Cateogry Cigarette and E-Cigarette Use For the purposes of our study objectives, we want to have 3 category variables for both cigarette and e_cigarette use at Wave 2. ## Create the variable for e-cigarette use com$e_cigarette_3cat_wave2 &lt;- NA ## Define never use as reporting neither current nor former use com$e_cigarette_3cat_wave2[com$wave2_e_smoker == &quot;No&quot; &amp; com$wave2_former_e_smoker == &quot;No&quot;] &lt;- 1 ## Define current use as reporting current use com$e_cigarette_3cat_wave2[com$wave2_e_smoker == &quot;Yes&quot;] &lt;- 2 ## Define former use as reporting no current use and reporting former use com$e_cigarette_3cat_wave2[com$wave2_e_smoker == &quot;No&quot; &amp; com$wave2_former_e_smoker == &quot;Yes&quot;] &lt;- 3 ## Then factor the variable so the numeric values are matched with appropriate label com$e_cigarette_3cat_wave2 &lt;- factor(com$e_cigarette_3cat_wave2, levels = c(1,2,3), labels = c(&quot;Never E-Cig&quot;,&quot;Current E-Cig&quot;,&quot;Former E-Cig&quot;)) ## Repeat variable creation process for cigarette use com$cigarette_3cat_wave2 &lt;- NA com$cigarette_3cat_wave2[com$wave2_smoker == &quot;No&quot; &amp; com$wave2_former_smoker == &quot;No&quot;] &lt;- 1 com$cigarette_3cat_wave2[com$wave2_smoker == &quot;Yes&quot;] &lt;- 2 com$cigarette_3cat_wave2[com$wave2_smoker == &quot;No&quot; &amp; com$wave2_former_smoker == &quot;Yes&quot;] &lt;- 3 com$cigarette_3cat_wave2 &lt;- factor(com$cigarette_3cat_wave2, levels = c(1,2,3), labels = c(&quot;Never Cig&quot;,&quot;Current Cig&quot;,&quot;Former Cig&quot;)) 3.5.2 Income Change from Waves 1 - 2 We also wish to capture changes in income from Waves 1 to 2. We capture the direction of the change, if such a change exists. ## First we create the new variable com$income_change &lt;- NA ## Then we go through each observation for(i in 1:nrow(com)){ ## We extract the wave1 and wave 2 income level wave1_income &lt;- com$wave1_income[i] wave2_income &lt;- com$wave2_income[i] ## If wave 1 income == wave 2 income, then we label the observation with 0 == no change if(wave1_income == wave2_income){ com$income_change[i] &lt;- 0 ## no change ## Otherwise, there was a change ## If income at Wave 1 was the lowest possible &lt;10k, then their income increased (== 1) }else if(wave1_income == &quot;&lt;$10k&quot;){ com$income_change[i] &lt;- 1 ## Similarly, if their income was at the highest level at Wave 1, then it must&#39;ve gone down (== - 1) }else if(wave1_income == &quot;&gt;=$100k&quot;){ com$income_change[i] == -1 ## For other income groups we just need to check if the wave 2 value was lower or higher }else if(wave1_income == &quot;$10-25k&quot;){ ## &lt;10k is the only income possible lower if(wave2_income == &quot;&lt;$10k&quot;){ com$income_change[i] &lt;- -1 ## Since we have eliminated no change and decrease, income level must&#39;ve gone up }else{ com$income_change[i] &lt;- 1 } }else if(wave1_income == &quot;$25-50k&quot;){ ## First check if income went down if(wave2_income == &quot;&lt;$10k&quot; || wave2_income == &quot;$10-25k&quot;){ com$income_change[i] &lt;- -1 ## If not, must&#39;ve increased }else{ com$income_change[i] &lt;- 1 } }else if(wave1_income == &quot;$50-100k&quot;){ ## &gt;100k is only possible increase value if(wave2_income == &quot;&gt;=$100k&quot;){ com$income_change[i] &lt;- 1 ## Otherwise, must&#39;ve decreased }else{ com$income_change[i] &lt;- -1 } } } com$income_change &lt;- factor(com$income_change, levels = c(-1,0,1), labels = c(&quot;Decreased&quot;,&quot;No Change&quot;,&quot;Increased&quot;)) com$income_change &lt;- relevel(com$income_change, ref = &quot;No Change&quot;) 3.6 Output the Imputed Dataset We now have our imputed dataset, with some generated variables that we need for our analyses. We will save it for later use! write.csv(com, paste(&quot;Data/Imputed_Dataset_&quot;,Sys.Date(),&quot;.csv&quot;, sep = &quot;&quot;)) "],["paramset.html", "Chapter 4 Generate Parameter Set 4.1 Loading Necessary Packages and Helper Functions 4.2 Set Some Hyperparamets to Customize Parameter Set 4.3 Loading Our Dataset and Defining Some Variables 4.4 Defining Absolute Age-Specific Income Transition Totals 4.5 Defining Cigarette Use Transitions 4.6 Defining E-Cigarette Transitions 4.7 Running Regression Analyses to Extract Log-Relative Risks 4.8 Drawing Our Parameter Set Samples 4.9 Generating the Final Parameter Set Sampling 4.10 Output the Results", " Chapter 4 Generate Parameter Set In order to run the model we need several pieces: a parameter set, an initial model state, an ODE function which simulates the model, calibration step to fine tune the parameters to historical data. Once these pieces are in place, we can actually run the model. In this chapter, we focus on generating a parameter set. The full description of the model is available in the manuscript, but, briefly, we are using the PATH Study dataset to extract information about both absolute and relative transitions. Of importance, we highlight that due to potential sampling bias, we believe that many of the absolute transitions (such as how many people who smoke cigarettes end their use each other) may be biased. As such, in the calibration chapter, we will modify some of these absolute rates. The relative rates (for example, the relative risk initiating smoking for someone making 25-50k versus &lt;10k) will be extracted from the PATH Study as well. 4.1 Loading Necessary Packages and Helper Functions First, we will load in some of the packages that we need. (Need to double check, some of these might not be used in this file) library(deSolve) library(minpack.lm) library(tidyverse) library(kableExtra) library(triangle) library(epiR) library(matlab) library(sandwich) library(lmtest) library(MCMCpack) library(survey) library(mice) toArray &lt;- function(vector, dim = c(2,6,3,3,13)){ array_structure &lt;- array(dim = dim) return(replace(array_structure, TRUE, vector)) } toVector &lt;- function(array){ return(c(array)) } ## We also define several variable to indicate the number of categories there are for each strata of interest ## For ease of use, the categories for each value are presented here as well! ## First Dimension sex_types &lt;- 2 ## 1 == Male, 2 == Female ## Second Dimension age_types &lt;- 6 ## 1 = 18-24, 2 = 25-34, 3 = 35-44, 4 = 45-54, 5 = 55-64, 6 = 65+ ## Third Dimension cigarette_types &lt;- 3 ## 1 = Never Cigarette Smoker, 2 = Current, 3 = Former ## Fourth Dimension e_cigarette_types &lt;- 3 ## 1 = Never E-Cigarette Smoker, 2 = Current, 3 = Former ## Fifth Dimension income_types &lt;- 13 ## 1 = &lt;10k annually, 6 = &lt;10, decreased from previous ## 2 = 10-25k, 7 = 10-25k decreased from previous, 10 = 10-25k increased from previous ## 3 = 25-50k, 8 = 25-50k decreased from previous, 11 = 25-50k increased from previous ## 4 = 50-100k, 9 = 50-100k decreased from previous, 12 = increased from previous ## 5 = &gt;100k, 4.2 Set Some Hyperparamets to Customize Parameter Set Prior to running the code, we want to identify the number of parameter sets (i.e. how many uncertainty analyses we will run) and we want to assign the dataset a name. This way we can keep track of which parameter set we are using in later steps. This can be quite helpful when troubleshooting and developing the model  when we might only want 5 or 10 perameter sets. Whereas, for the final results, we will want to have 1,000 (give or take a zero). sampling_number &lt;- 10 parameter_set_number &lt;- &quot;One&quot; 4.3 Loading Our Dataset and Defining Some Variables We are going to load our imputed dataset from the prior chapter. Then, our model is stratified by age, sex, cigarette use, e-cigarette use, and income, and so we want to identify the baseline (i.e. Wave 2 values for each participant). For income, we have 5 income levels but 13 compartments total, as there are compartments for whether someone recently changed income. For example, &lt;$10k stable, &lt;10k decreased from previous year, etc etc. So we will identify changes in income by looking at differences between Wave 1 and Wave 2 income level. As well, it is important to highlight that our dataset is actually 15 imputed datasets. There will be some instances where we must run analyses 15 distinct times and pool the results (regression analyses) and cases were we can simply run the analysis for all 15 at once and the value will represent an average across the 15 datasets (i.e. the same as running the analysis 15 times and then pooling (via average)). As we go, the distinction will be highlighted for transparency (and to ensure a proofreader can confirm!) Further, the data is weighted to be representative of the US adult population and we will highlight where and when these weights are applied. ## First we load in the dataset. data &lt;- read.csv(&quot;Data/Imputed_Dataset_2021-04-08.csv&quot;, header = T) ## For later, we are going to store the number of imputed datasets ## This will come in handy if we ever change the number of imputed datasets we use imputations &lt;- max(data$.imp) ## Next we initialize the 5 strata variables in our dataset ## Note, for our analyses, we want the variables in numeric format ## Whereas, the initial dataset has them stored as factor variables (i.e. strings whose numeric values may not be appropriately ordered) data$baseline_age &lt;- NA data$baseline_sex &lt;- NA data$baseline_income &lt;- NA data$baseline_cigarette &lt;- NA data$baseline_e_cigarette &lt;- NA ## Next we will loop through each of the participants and for(i in 1:nrow(data)){ ## First we extract the wave 2 age age &lt;- data$wave2_age[i] ## Based on the value, we assign the appropriate numeric value if(age == &quot;18-24&quot;){data$baseline_age[i] &lt;- 1} else if(age == &quot;25-34&quot;){data$baseline_age[i] &lt;- 2} else if(age == &quot;35-44&quot;){data$baseline_age[i] &lt;- 3} else if(age == &quot;45-54&quot;){data$baseline_age[i] &lt;- 4} else if(age == &quot;55-64&quot;){data$baseline_age[i] &lt;- 5} else if(age == &quot;&gt;65&quot;){data$baseline_age[i] &lt;- 6} ## Next, we extract sex sex &lt;- data$gender[i] ## Based on the value, we assign the appropriate value if(sex == &quot;Male&quot;){data$baseline_sex[i] &lt;- 1} else if(sex == &quot;Female&quot;){data$baseline_sex[i] &lt;- 2} ## ## Next, we will do cigarette smoking status ## In the initial PATH dataset, they had a measure for current use and a measure for former use ## However, we want a 3 category (never, current, former) variable ## ## First we extract the current and former status variable cigarette_current &lt;- data$wave2_smoker[i] cigarette_former &lt;- data$wave2_former_smoker[i] ## Then we define three booleans (true/false), such that two are false and one is true ## The true one then corresponds to the value we want to assign never_smoker &lt;- cigarette_current == &quot;No&quot; &amp;&amp; cigarette_former == &quot;No&quot; ## If neither a current nor former smoker, then assign never current_smoker &lt;- cigarette_current == &quot;Yes&quot; ## If a current smoker, then assign current former_smoker &lt;- cigarette_current == &quot;No&quot; &amp;&amp; cigarette_former == &quot;Yes&quot; ## if not current, but are a former smoker, then assign former ## Assign the appropriate value if(never_smoker){data$baseline_cigarette[i] &lt;- 1} if(current_smoker){data$baseline_cigarette[i] &lt;- 2} if(former_smoker){data$baseline_cigarette[i] &lt;- 3} ## We will assign our e-cigarette use status variable by the same logic ## First, extract current and former use ecig_current &lt;- data$wave2_e_smoker[i] ecig_former &lt;- data$wave2_former_e_smoker[i] ## Generate three booleans to identify the correct level never_smoker &lt;- ecig_current == &quot;No&quot; &amp;&amp; ecig_former == &quot;No&quot; current_smoker &lt;- ecig_current == &quot;Yes&quot; former_smoker &lt;- ecig_current == &quot;No&quot; &amp;&amp; ecig_former == &quot;Yes&quot; ## Assign value if(never_smoker){data$baseline_e_cigarette[i] &lt;- 1} if(current_smoker){data$baseline_e_cigarette[i] &lt;- 2} if(former_smoker){data$baseline_e_cigarette[i] &lt;- 3} ## Next we will do income ## We need to determine both the wave2 income level ## and if (and which direction) income changed from wave1 to wave2 ## Below are the 13 different compartments: ## 1 = &lt;10k annually, 6 = &lt;10, decreased from previous ## 2 = 10-25k, 7 = 10-25k decreased from previous, 10 = 10-25k increased from previous ## 3 = 25-50k, 8 = 25-50k decreased from previous, 11 = 25-50k increased from previous ## 4 = 50-100k, 9 = 50-100k decreased from previous, 12 = 50-100k increased from previous ## 5 = &gt;100k, 13 = &gt;100k increased from previous wave1_income &lt;- data$wave1_income[i] wave2_income &lt;- data$wave2_income[i] ## Go through each set of possibilities ## First if the wave2 income is &lt;$10k if(wave2_income == &quot;&lt;$10k&quot;){ ## Either the income stayed the same (i.e. stable) if(wave1_income == &quot;&lt;$10k&quot;){ data$baseline_income[i] &lt;- 1 ## $10k, stable ## Or it went down from prior (because this is the lowest income group) }else if(wave1_income != &quot;&lt;$10k&quot;){ data$baseline_income[i] &lt;- 6 ## decreased to $10k } ## For each of the 5 income levels, we follow the same logic and assign the appropriate income level value }else if(wave2_income == &quot;$10-25k&quot;){ if(wave1_income == &quot;$10-25k&quot;){ data$baseline_income[i] &lt;- 2 ## $10-25k, stable }else if(wave1_income == &quot;&lt;$10k&quot;){ data$baseline_income[i] &lt;- 10 ## increased to 10-25 }else if(wave1_income %in% c(&quot;$25-50k&quot;,&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)){ data$baseline_income[i] &lt;- 7 ## decreased to 10-25 } }else if(wave2_income == &quot;$25-50k&quot;){ if(wave1_income == &quot;$25-50k&quot;){ data$baseline_income[i] &lt;- 3 ## $25-50k, stable }else if(wave1_income %in% c(&quot;&lt;$10k&quot;, &quot;$10-25k&quot;)){ data$baseline_income[i] &lt;- 11 ## increased to 25-50k }else if(wave1_income %in% c(&quot;$50k-100k&quot;,&quot;&gt;=$100k&quot;)){ data$baseline_income[i] &lt;- 8 ## decreased to 25-50k } }else if(wave2_income == &quot;$50k-100k&quot;){ if(wave1_income == &quot;$50k-100k&quot;){ data$baseline_income[i] &lt;- 4 ## $50-100k, stable }else if(wave1_income %in% c(&quot;&lt;$10k&quot;, &quot;$10-25k&quot;,&quot;$25-50k&quot;)){ data$baseline_income[i] &lt;- 12 ## increased to 50-100k }else if(wave1_income == &quot;&gt;=$100k&quot;){ data$baseline_income[i] &lt;- 9 ## decreased to 50-100k } }else if(wave2_income == &quot;&gt;=$100k&quot;){ if(wave1_income == &quot;&gt;=$100k&quot;){ data$baseline_income[i] &lt;- 5 ## $100k, stable }else if(wave1_income != &quot;&gt;=$100k&quot;){ data$baseline_income[i] &lt;- 13 ## increased to $100k } } } 4.4 Defining Absolute Age-Specific Income Transition Totals Next we need to calculate how many people transition between income levels and we need to do it by age group. This is because income transitions appear to be more inelastic as people get older (i.e. income level less likely to fluctuate extremes as people age). Essentially, for each age we want to know how many people at Income Level X at Wave 2 transition to Income Level Y at Wave 3. Note that we are only calculating income transitions for the 5 income levels - we are not calculating transitions between the 13 income compartments. The ODE solver will handle identifying if people are in an income stable or income transitionary compartment. We will call the object we are storing the transition totals in alpha_income_transitions, because they will be applied later (when we generate our sample) to sample the transition probability from a Dirichlet distribution (alpha parameters). ## Generate an array (allocate memory) which stores how many people transition from Level X at wave 2 to level Y at wave 3 alpha_income_transitions &lt;- toArray(rep(0,150),dim = c(age_types, 5, 5)) ## Loop through each participant for(i in 1:nrow(data)){ ## extract age and wave 2 and 3 income level age &lt;- data$baseline_age[i] wave2_income &lt;- data$wave2_income[i] wave3_income &lt;- data$wave3_income[i] ## assign the appropriate numeric value for income level if(wave2_income == &quot;&lt;$10k&quot;){ wave2_income &lt;- 1 }else if(wave2_income == &quot;$10-25k&quot;){ wave2_income &lt;- 2 }else if(wave2_income == &quot;$25-50k&quot;){ wave2_income &lt;- 3 }else if(wave2_income == &quot;$50k-100k&quot;){ wave2_income &lt;- 4 }else if(wave2_income == &quot;&gt;=$100k&quot;){ wave2_income &lt;- 5 } ## assign the appropriate numeric value for income level if(wave3_income == &quot;&lt;$10k&quot;){ wave3_income &lt;- 1 }else if(wave3_income == &quot;$10-25k&quot;){ wave3_income &lt;- 2 }else if(wave3_income == &quot;$25-50k&quot;){ wave3_income &lt;- 3 }else if(wave3_income == &quot;$50k-100k&quot;){ wave3_income &lt;- 4 }else if(wave3_income == &quot;&gt;=$100k&quot;){ wave3_income &lt;- 5 } ## We add the number of people to the appropriate cell for how many people transition from level X at wave 2 to level Y at aim 3 ## Note that each person doesn&#39;t represent 1 person, but instead is weighted to represent a set of people ## Thus, instead of adding 1 to the cell, we are going to add the weighted value (R03_A_AWGT) alpha_income_transitions[age,wave2_income,wave3_income] &lt;- alpha_income_transitions[age,wave2_income,wave3_income] + data$R03_A_AWGT[i] } ## We then want the average transition rates. Remember, we just added all the imputed datasets ## But the more observations in this array, the more power and the smaller our sampling distribution will be ## THus, to get our average across all the imputations, we simply divide the values by the number of imputations alpha_income_transitions &lt;- alpha_income_transitions/imputations 4.5 Defining Cigarette Use Transitions Next, we will calculate the cigarette use transition totals (from wave 2 to wave 3). We will do this only for a referent class because we are going to modify these transitions in the ODE by age, sex, income level, and alternate tobacco product use. These modifications will be applied via relative risks extracted from models later in this chapter. These models will use the referent class defined here: Men, aged 18-24, making &lt;$10k. Similar to with income transitions, we store the transition totals to later sample probabilities from a Dirichlet distribution. ## First we extract our referent data referent_data &lt;- data[data$baseline_age == 1 &amp; data$wave2_income == &quot;&lt;$10k&quot; &amp; data$baseline_sex == 1,] ## Next we allocate memory to store how many people (weighted) transition from cigarette use level X at wave 2 to level Y at wave 3 alpha_cigarette_transitions &lt;- toArray(rep(0,cigarette_types*cigarette_types), dim = c(cigarette_types, cigarette_types)) ## we go through each observation for(i in 1:nrow(referent_data)){ ## First we extract the baseline cigarette use (wave 2) wave2_cigarette &lt;- referent_data$baseline_cigarette[i] ## Next we allocate memory for the wave 3 status (which we need to compute) wave3_cigarette &lt;- NA ## we extract the current and former status cigarette_current &lt;- referent_data$wave3_smoker[i] cigarette_former &lt;- referent_data$wave3_former_smoker[i] ## and then, as before, we generate three booleans to figure out which cigarette level they are at never_smoker &lt;- cigarette_current == &quot;No&quot; &amp;&amp; cigarette_former == &quot;No&quot; current_smoker &lt;- cigarette_current == &quot;Yes&quot; former_smoker &lt;- cigarette_current == &quot;No&quot; &amp;&amp; cigarette_former == &quot;Yes&quot; ## then we assign the appropriate value if(never_smoker){wave3_cigarette &lt;- 1} if(current_smoker){wave3_cigarette &lt;- 2} if(former_smoker){wave3_cigarette &lt;- 3} ## Add the correct number of weighted people for the given transition alpha_cigarette_transitions[wave2_cigarette, wave3_cigarette] &lt;- alpha_cigarette_transitions[wave2_cigarette, wave3_cigarette] + referent_data$R03_A_AWGT[i] } ## Finally need to take the average number of transitions across all the imputations alpha_cigarette_transitions &lt;- alpha_cigarette_transitions/imputations 4.6 Defining E-Cigarette Transitions We are going to do the same thing for e-cigarette transitions with the referent group data. We are similarly going to modify these rates with relative risks extracted from regression models based on other factors. ## Allocate memory to store how many people (weighted) make given transitions alpha_e_cigarette_transitions &lt;- toArray(rep(0,e_cigarette_types*e_cigarette_types), dim = c(e_cigarette_types, e_cigarette_types)) ## Loop through each participant in the referent data for(i in 1:nrow(referent_data)){ ## Get wave 2 e-cig status wave2_e_cigarette &lt;- referent_data$baseline_e_cigarette[i] ## Allocate memory for wave 3 value wave3_e_cigarette &lt;- NA ## Get the wave 3 current and former use status e_cigarette_current &lt;- referent_data$wave3_e_smoker[i] e_cigarette_former &lt;- referent_data$wave3_former_e_smoker[i] ## Generate the 3 boolean values never_smoker &lt;- e_cigarette_current == &quot;No&quot; &amp;&amp; e_cigarette_former == &quot;No&quot; current_smoker &lt;- e_cigarette_current == &quot;Yes&quot; former_smoker &lt;- e_cigarette_current == &quot;No&quot; &amp;&amp; e_cigarette_former == &quot;Yes&quot; ## Then assign the appropriate value if(never_smoker){wave3_e_cigarette &lt;- 1} if(current_smoker){wave3_e_cigarette &lt;- 2} if(former_smoker){wave3_e_cigarette &lt;- 3} ## Add the appropriate number of people for the given transition alpha_e_cigarette_transitions[wave2_e_cigarette, wave3_e_cigarette] &lt;- alpha_e_cigarette_transitions[wave2_e_cigarette, wave3_e_cigarette] + referent_data$R03_A_AWGT[i] } ## Finally need to take the average number of transitions across all the imputations alpha_e_cigarette_transitions &lt;- alpha_e_cigarette_transitions/imputations ## To correct for an imputation quirk, a couple participants ended up transitioning from Current E-Smoke to Never (which shouldn&#39;t be possible) ## To account for this, we reassign those transition values to the current to former use alpha_e_cigarette_transitions[2,3] &lt;- alpha_e_cigarette_transitions[2,3] + alpha_e_cigarette_transitions[2,1] alpha_e_cigarette_transitions[2,1] &lt;- 0 4.7 Running Regression Analyses to Extract Log-Relative Risks Now that we have identified our absolute transitions1 we need to extract relative modifiers for the cigarette and e-cigarette transitions. Essentially, we want to modify transition rates by age, sex, income, and the other tobacco product use. To do so, we are going to fit 6 regressions aimed at capturing: Cigarette Initiation Cigarette Cessation Cigarette Re-Instatment E-Cigarette Initiation E-Cigarette Cessation E-Cigarette Re-Instatment Given our 15 imputed datasets, we will be running the regression separately for each dataset and then pooling the results. We will use Zous modified Poisson regression so that we may extract log-relative risks and standard errors that can then be applied for sampling relative risks to modify transistion rates in the model. 4.7.1 Defining Income Change Variable One of the modifiers in our model will be whether someones income has recently increased or decreased or if they are in a stable compartment. We will use a variable in our statistical models to capture this where the referent value is stable income and the two other values are: 1) increased from previous and 2) decreased from previous. ## ## First we need a simplified variable for income change where 1 = stayed the same from Wave 1 to 2, 2 = decreased, 3 = increased ## data$income_change &lt;- NA data$income_change[data$baseline_income %in% c(1,2,3,4,5)] &lt;- 1 data$income_change[data$baseline_income %in% c(6,7,8,9)] &lt;- 2 data$income_change[data$baseline_income %in% c(10,11,12,13)] &lt;- 3 4.7.2 Cigarette Initiation Model For the first model, we are going to subset the data into all those who report never smoking status at Wave 2. We then want to fit a model where the outcome is wave 3 smoking status. 0 = still a never smoker and 1 = current smoker (i.e. smoking initiation). ## First we get the subset of all participants who report never_smokers &lt;- data[which(data$baseline_cigarette == 1),-c(1)] ## We need to generate our outcome ## Since it is a poisson regression it needs to be numeric ## Thus we assign 1 to those who initiated smoking ## And we assign 0 to those who did not never_smokers$wave3_smoker_poisson &lt;- NA never_smokers$wave3_smoker_poisson[never_smokers$wave3_smoker == &quot;Yes&quot;] &lt;- 1 never_smokers$wave3_smoker_poisson[never_smokers$wave3_smoker == &quot;No&quot;] &lt;- 0 ## ## Because of the imputed datasets, we must run the regression for each ## To execute this we must chain several functions ## First we use the with/by function pairing to run the analysis on each imputed dataset ## We then chain three functions. The interior function is that we must use the survey weights and replicate weights to generate a population-weighted dataset ## This is done with code design = svrepdesign(....). This function uses the weights provided to ensure the dataset is representative of us adults ## We then run the poisson regression (svyglm) with a log link, using age, sex, income level, income change, and wave 2 e-cigarette use as predictors ## Finally, we use the coeftest function to apply a sandwhich error estimator ## ## The final object returned is a list of 15 regression results, one from each imputed dataset zou &lt;- with(never_smokers, by(never_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_e_cigarette, levels = c(1,2,3), labels = c(&quot;Never E-Cigarette&quot;,&quot;Current E-Cigarette&quot;,&quot;Former E-Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## We are then able to use the pool function in the mice package to get the pooled results of the regressions ct &lt;- summary(pool(zou)) ## ## Finally, we need to store the results so that we can sample from them later on ## rr_cigarette_initiation_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_cigarette_initiation_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_cigarette_initiation_sex_point_estimates &lt;- c(1, ct[7,2]) rr_cigarette_initiation_sex_standard_errors &lt;- c(0, ct[7,3]) rr_cigarette_initiation_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_cigarette_initiation_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_cigarette_initiation_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_cigarette_initiation_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_cigarette_initiation_e_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_cigarette_initiation_e_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.7.3 Cigarette Cessation Model For the second model, we will subset the data to just those who report current smoking with the outcome being cessation (i.e. no use, at Wave 3). ## Subset the data to just current smokers at Wave 2 current_smokers &lt;- data[which(data$baseline_cigarette == 2),-c(1)] ## Then we need to define our outcome, with no smoking at Wave 3 as our cessation outcome current_smokers$wave3_former_smoker_poisson &lt;- NA current_smokers$wave3_former_smoker_poisson[current_smokers$wave3_smoker == &quot;No&quot;] &lt;- 1 current_smokers$wave3_former_smoker_poisson[current_smokers$wave3_smoker == &quot;Yes&quot;] &lt;- 0 ## As described in previous section, we need to chain several functions in order to run the Zou&#39;s modified regression zou &lt;- with(current_smokers, by(current_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_former_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_e_cigarette, levels = c(1,2,3), labels = c(&quot;Never E-Cigarette&quot;,&quot;Current E-Cigarette&quot;,&quot;Former E-Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## Then we pool the results ct &lt;- summary(pool(zou)) ## Finally, we store the results for sampling from later rr_cigarette_cessation_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_cigarette_cessation_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_cigarette_cessation_sex_point_estimates &lt;- c(1, ct[7,2]) rr_cigarette_cessation_sex_standard_errors &lt;- c(0, ct[7,3]) rr_cigarette_cessation_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_cigarette_cessation_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_cigarette_cessation_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_cigarette_cessation_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_cigarette_cessation_e_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_cigarette_cessation_e_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.7.4 Cigarette Re-Instatement Model For this model, we will look at reinstatement of cigarette use among former smokers at Wave 2. ## Subset the data to just look at former smokers former_smokers &lt;- data[which(data$baseline_cigarette == 3),-c(1)] ## The outcome is then, whether or not the participant reported reinstating cigarette use at Wave 3. former_smokers$wave3_smoker_poisson &lt;- NA former_smokers$wave3_smoker_poisson[former_smokers$wave3_smoker == &quot;Yes&quot;] &lt;- 1 former_smokers$wave3_smoker_poisson[former_smokers$wave3_smoker == &quot;No&quot;] &lt;- 0 ## As before, we chain several functions to run the regression on each imputed dataset zou &lt;- with(former_smokers, by(former_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_e_cigarette, levels = c(1,2,3), labels = c(&quot;Never E-Cigarette&quot;,&quot;Current E-Cigarette&quot;,&quot;Former E-Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## Then, we pool the results ct &lt;- summary(pool(zou)) ## And store the results for later rr_cigarette_reinstatement_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_cigarette_reinstatement_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_cigarette_reinstatement_sex_point_estimates &lt;- c(1, ct[7,2]) rr_cigarette_reinstatement_sex_standard_errors &lt;- c(0, ct[7,3]) rr_cigarette_reinstatement_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_cigarette_reinstatement_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_cigarette_reinstatement_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_cigarette_reinstatement_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_cigarette_reinstatement_e_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_cigarette_reinstatement_e_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.7.5 E-Cigarette Initiation Model We repeat the same process, but now with e-cigarette transitions. We start by looking at initiation of e-cigarette use at Wave 3 amongst those reporting no e-cig use at Wave 2. ## Subset the data to look at never e-cig users at Wave 2 never_e_smokers &lt;- data[which(data$baseline_e_cigarette == 1),-c(1)] ## Define the outcome never_e_smokers$wave3_e_smoker_poisson &lt;- NA never_e_smokers$wave3_e_smoker_poisson[never_e_smokers$wave3_e_smoker == &quot;Yes&quot;] &lt;- 1 never_e_smokers$wave3_e_smoker_poisson[never_e_smokers$wave3_e_smoker == &quot;No&quot;] &lt;- 0 ## Chain the appropriate functions in order to run the regression on each imputed dataset zou &lt;- with(never_e_smokers, by(never_e_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_e_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_cigarette, levels = c(1,2,3), labels = c(&quot;Never Cigarette&quot;,&quot;Current Cigarette&quot;,&quot;Former Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## Pool the results ct &lt;- summary(pool(zou)) ## Store the results for future sampling rr_e_cigarette_initiation_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_e_cigarette_initiation_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_e_cigarette_initiation_sex_point_estimates &lt;- c(1, ct[7,2]) rr_e_cigarette_initiation_sex_standard_errors &lt;- c(0, ct[7,3]) rr_e_cigarette_initiation_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_e_cigarette_initiation_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_e_cigarette_initiation_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_e_cigarette_initiation_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_e_cigarette_initiation_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_e_cigarette_initiation_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.7.6 E-Cigarette Cessation Model ## Subset to just look at current e-cig users at Wave 2 current_e_smokers &lt;- data[which(data$baseline_e_cigarette == 2),-c(1)] ## Define the outcome as cessation of e-cig use at Wave 3 current_e_smokers$wave3_former_e_smoker_poisson &lt;- NA current_e_smokers$wave3_former_e_smoker_poisson[current_e_smokers$wave3_e_smoker == &quot;No&quot;] &lt;- 1 current_e_smokers$wave3_former_e_smoker_poisson[current_e_smokers$wave3_e_smoker == &quot;Yes&quot;] &lt;- 0 ## Chain the appropriate functions to run the regression on each imputed dataset zou &lt;- with(current_e_smokers, by(current_e_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_former_e_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_cigarette, levels = c(1,2,3), labels = c(&quot;Never Cigarette&quot;,&quot;Current Cigarette&quot;,&quot;Former Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## Pool the results ct &lt;- summary(pool(zou)) ## Store the results for sampling from later on rr_e_cigarette_cessation_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_e_cigarette_cessation_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_e_cigarette_cessation_sex_point_estimates &lt;- c(1, ct[7,2]) rr_e_cigarette_cessation_sex_standard_errors &lt;- c(0, ct[7,3]) rr_e_cigarette_cessation_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_e_cigarette_cessation_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_e_cigarette_cessation_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_e_cigarette_cessation_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_e_cigarette_cessation_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_e_cigarette_cessation_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.7.7 E-Cigarette Reinstatement Model ## Subset the data to only look at former e-cig users at Wave 2 former_e_smokers &lt;- data[which(data$baseline_e_cigarette == 3),-c(1)] ## Define the outcome as resuming e-cig use at Wave 3 former_e_smokers$wave3_e_smoker_poisson &lt;- NA former_e_smokers$wave3_e_smoker_poisson[former_e_smokers$wave3_e_smoker == &quot;Yes&quot;] &lt;- 1 former_e_smokers$wave3_e_smoker_poisson[former_e_smokers$wave3_e_smoker == &quot;No&quot;] &lt;- 0 ## Chain the appropriate functions to run the regression on each imputed dataset zou &lt;- with(former_e_smokers, by(former_e_smokers, .imp, function (x) coeftest(svyglm(formula = wave3_e_smoker_poisson ~ factor(baseline_age, levels = c(1,2,3,4,5,6), labels = c(&quot;18-24&quot;,&quot;25-34&quot;,&quot;35-44&quot;,&quot;45-54&quot;,&quot;55-64&quot;,&quot;65+&quot;)) + factor(baseline_sex, levels = c(1,2), labels = c(&quot;Male&quot;,&quot;Female&quot;)) + relevel(wave2_income, ref = &quot;&lt;$10k&quot;) + factor(income_change, levels = c(1,2,3), labels = c(&quot;Stable&quot;,&quot;Decreased From Prior&quot;,&quot;Increased From Prior&quot;)) + factor(baseline_cigarette, levels = c(1,2,3), labels = c(&quot;Never Cigarette&quot;,&quot;Current Cigarette&quot;,&quot;Former Cigarette&quot;)), design=svrepdesign(variables=x[,c(1:17,119:127)], repweights=x[,19:118], weights=x[,18], combined.weights=TRUE, type=&quot;other&quot;, scale=1, rscales=1), family = poisson(link=&quot;log&quot;)), vcov = sandwich))) ## Pool the results ct &lt;- summary(pool(zou)) ## Save the results for later sampling rr_e_cigarette_reinstatement_age_point_estimates &lt;- c(1, ct[2:6,2]) rr_e_cigarette_reinstatement_age_standard_errors &lt;- c(0, ct[2:6,3]) rr_e_cigarette_reinstatement_sex_point_estimates &lt;- c(1, ct[7,2]) rr_e_cigarette_reinstatement_sex_standard_errors &lt;- c(0, ct[7,3]) rr_e_cigarette_reinstatement_income_point_estimates &lt;- c(1, ct[8:11,2]) rr_e_cigarette_reinstatement_income_standard_errors &lt;- c(0, ct[8:11,3]) rr_e_cigarette_reinstatement_income_change_point_estimates &lt;- c(1, ct[12:13,2]) rr_e_cigarette_reinstatement_income_change_standard_errors &lt;- c(0, ct[12:13,3]) rr_e_cigarette_reinstatement_cig_point_estimates &lt;- c(1, ct[14:15,2]) rr_e_cigarette_reinstatement_cig_standard_errors &lt;- c(0, ct[14:15,3]) 4.8 Drawing Our Parameter Set Samples Now we have the data that we need to draw our parameter set samples. The following code will be used to generate the parameter sets for running uncertainty analyses. The number of parameter sets created is determined by the sampling_number hyper-parameter that can be modified at the beginning of this document. 4.8.1 Income Transitions Sample Earlier, we created the alpha_income_transitions object, which contains the average number of weighted-people who transition from income level X to income level Y from Waves 2 to 3. We can use use a series of Dirichlet distribution samples to extract samples. We note that the sampled values correspond to proportions (not rates) and that they will need to be converted to rates at a later step. ## First, we want to allocate memory for storing the sampled transition proportions ## Each row is a different parameter set sample, the columns can then be converted into an array that can be navigated using age, income wave 2, income wave 3 to extract appropriate data income_transitions_sample &lt;- matrix(nrow = sampling_number, ncol = age_types*5*5) ## For each parameter set sample, we repeat this process for(i in 1:sampling_number){ ## We first allocate memory for storing our generated parameter set temp &lt;- toArray(rep(0,age_types*5*5),dim=c(age_types,5,5)) ## We then want to run a Dirichlet distribution for each age-level, wave 2 income combination ## Thus we loop through age and income level and run the appropriate Dirichlet ## The idea here is that, for people at age X, income level Y --&gt; what proportion transition to income level Z for(age_level in 1:age_types){ for(income_level in 1:5){ ## Run the Dirichlet sample and store the results temp[age_level,income_level,] &lt;- rdirichlet(1, alpha_income_transitions[age_level,income_level,]) } } ## Finally, we store the full sampling results in the appropriate row of the data frame containing the sampled values income_transitions_sample[i,] &lt;- toVector(temp) } 4.8.2 Cigarette Transitions Sample This process mirrors the previous, in which we sample our absolute cigarette transition proportions based on the alpha_cigarette_transitions object defined previously. We will need to convert these proportions to rates at a later step. ## Allocate memory for storing our results cigarette_transitions_sample &lt;- matrix(nrow = sampling_number, ncol = cigarette_types*cigarette_types) ## For each parameter set, we will do the following for(i in 1:sampling_number){ ## Allocate memory for the sampled transition proportions temp &lt;- toArray(rep(0,cigarette_types*cigarette_types),dim=c(cigarette_types,cigarette_types)) ## Loop through each age, wave 2 cigarette level for(age_level in 1:age_types){ for(cigarette_level in 1:cigarette_types){ ## Sample the proportion that transition to each cigarette level Z temp[cigarette_level,] &lt;- rdirichlet(1, alpha_cigarette_transitions[cigarette_level,]) } } ## Store the results cigarette_transitions_sample[i,] &lt;- toVector(temp) } 4.8.3 E-Cigarette Transitions Sample Same idea as above, now sampling e-cigarette transition proportions. Will need to be converted to rates at a later step. ## Allocate memory for the results e_cigarette_transitions_sample &lt;- matrix(nrow = sampling_number, ncol = e_cigarette_types*e_cigarette_types) ## For each parameter set we repeat the following for(i in 1:sampling_number){ ## Allocate memory for the results temp &lt;- toArray(rep(0,e_cigarette_types*e_cigarette_types),dim=c(e_cigarette_types,e_cigarette_types)) ## Loop through each age, wave 2 e-cigarette level for(age_level in 1:age_types){ for(e_cigarette_level in 1:e_cigarette_types){ ## Sample the proportion that transition to each e-cigarette level Z temp[e_cigarette_level,] &lt;- rdirichlet(1, alpha_e_cigarette_transitions[e_cigarette_level,]) } } ## Save the results for later sampling e_cigarette_transitions_sample[i,] &lt;- toVector(temp) } 4.8.4 Sampling Relative Risks In total we fit 6 regressions total and each model has 5 predictors of interest and each predictor was categorical with between 2 and 6 categorical levels. In total, this means we have around 100 relative risks that we need to sample2. In the next code chunk, the sampling of every relative risk is documented. It is done in a single code chunk to reduce redundancy in the description and comments are provided in the code to indicate what each section corresponds to. ## ## First we sample RRs for cigarette initiation. We have: age, sex, income, change in income, and e-cigarette use RRs to sample ## ## ## Cigarette Initiation: Age ## ## First allocate memory to store the results ## The number of rows correspond to the number of parameter sets being sampled ## The number of columns correspond to the number of age categories that RRs are needed for rr_cigarette_initiation_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) ## Next, assign the referent group an RR of 1 rr_cigarette_initiation_age_point_estimates_sample[,1] &lt;- 1 ## Then, for each of the other 5 age categories, we sample RRs from the log-relative risk and standard errors extracted from the cigarette initiation model earlier ## We exponentiate the values in order to get relative risks (as opposed to log relative risks) ## We do this separately for each age category rr_cigarette_initiation_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_age_point_estimates[2], sd = rr_cigarette_initiation_age_standard_errors[2])) rr_cigarette_initiation_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_age_point_estimates[3], sd = rr_cigarette_initiation_age_standard_errors[3])) rr_cigarette_initiation_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_age_point_estimates[4], sd = rr_cigarette_initiation_age_standard_errors[4])) rr_cigarette_initiation_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_age_point_estimates[5], sd = rr_cigarette_initiation_age_standard_errors[5])) rr_cigarette_initiation_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_age_point_estimates[6], sd = rr_cigarette_initiation_age_standard_errors[6])) ## ## Cigarette Initiation: Sex ## ## First we allocate memory for the sampled RRs rr_cigarette_initiation_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) ## We assign 1 as the RRs for the referent group rr_cigarette_initiation_sex_point_estimates_sample[,1] &lt;- 1 ## Then we sample the RRs for the other category level (in this case, corresponding to being female) rr_cigarette_initiation_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_sex_point_estimates[2], sd = rr_cigarette_initiation_sex_standard_errors[2])) ## ## Cigarette Initiation: Income Level ## ## Allocate memory rr_cigarette_initiation_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) ## Set the referent RRs to 1 rr_cigarette_initiation_income_point_estimates_sample[,1] &lt;- 1 ## Then sample the RRs rr_cigarette_initiation_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_point_estimates[2], sd = rr_cigarette_initiation_income_standard_errors[2])) rr_cigarette_initiation_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_point_estimates[3], sd = rr_cigarette_initiation_income_standard_errors[3])) rr_cigarette_initiation_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_point_estimates[4], sd = rr_cigarette_initiation_income_standard_errors[4])) rr_cigarette_initiation_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_point_estimates[5], sd = rr_cigarette_initiation_income_standard_errors[5])) ## ## Cigarette Initiation: Income Change ## ## Allocate memory rr_cigarette_initiation_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) ## Set the referent to 1 rr_cigarette_initiation_income_change_point_estimates_sample[,1] &lt;- 1 ## Sample the RRs from the regression results rr_cigarette_initiation_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_change_point_estimates[2], sd = rr_cigarette_initiation_income_change_standard_errors[2])) rr_cigarette_initiation_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_income_change_point_estimates[3], sd = rr_cigarette_initiation_income_change_standard_errors[3])) ## ## Cigarette Initiation: E-Cigarette Use ## ## Allocate the memory rr_cigarette_initiation_e_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = e_cigarette_types) ## Set the referent class RRs to 1 rr_cigarette_initiation_e_cig_point_estimates_sample[,1] &lt;- 1 ## Sample the RRs from the regression results rr_cigarette_initiation_e_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_e_cig_point_estimates[2], sd = rr_cigarette_initiation_e_cig_standard_errors[2])) rr_cigarette_initiation_e_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_initiation_e_cig_point_estimates[3], sd = rr_cigarette_initiation_e_cig_standard_errors[3])) ## ## From this point forward (in this code chunk), comments will only indicate which parameters are being sampled ## Detailed notes for the prior code in this chunk correspond to the code throughout ## ## ## Cigarette Cessation: Age ## rr_cigarette_cessation_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) rr_cigarette_cessation_age_point_estimates_sample[,1] &lt;- 1 rr_cigarette_cessation_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_age_point_estimates[2], sd = rr_cigarette_cessation_age_standard_errors[2])) rr_cigarette_cessation_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_age_point_estimates[3], sd = rr_cigarette_cessation_age_standard_errors[3])) rr_cigarette_cessation_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_age_point_estimates[4], sd = rr_cigarette_cessation_age_standard_errors[4])) rr_cigarette_cessation_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_age_point_estimates[5], sd = rr_cigarette_cessation_age_standard_errors[5])) rr_cigarette_cessation_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_age_point_estimates[6], sd = rr_cigarette_cessation_age_standard_errors[6])) ## ## Cigarette Cessation: Sex ## rr_cigarette_cessation_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) rr_cigarette_cessation_sex_point_estimates_sample[,1] &lt;- 1 rr_cigarette_cessation_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_sex_point_estimates[2], sd = rr_cigarette_cessation_sex_standard_errors[2])) ## ## Cigarette Cessation: Income Level ## rr_cigarette_cessation_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) rr_cigarette_cessation_income_point_estimates_sample[,1] &lt;- 1 rr_cigarette_cessation_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_point_estimates[2], sd = rr_cigarette_cessation_income_standard_errors[2])) rr_cigarette_cessation_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_point_estimates[3], sd = rr_cigarette_cessation_income_standard_errors[3])) rr_cigarette_cessation_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_point_estimates[4], sd = rr_cigarette_cessation_income_standard_errors[4])) rr_cigarette_cessation_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_point_estimates[5], sd = rr_cigarette_cessation_income_standard_errors[5])) ## ## Cigarette Cessation: Income Change ## rr_cigarette_cessation_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) rr_cigarette_cessation_income_change_point_estimates_sample[,1] &lt;- 1 rr_cigarette_cessation_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_change_point_estimates[2], sd = rr_cigarette_cessation_income_change_standard_errors[2])) rr_cigarette_cessation_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_income_change_point_estimates[3], sd = rr_cigarette_cessation_income_change_standard_errors[3])) ## ## Cigarette Cessation: E-Cigarette ## rr_cigarette_cessation_e_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = e_cigarette_types) rr_cigarette_cessation_e_cig_point_estimates_sample[,1] &lt;- 1 rr_cigarette_cessation_e_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_e_cig_point_estimates[2], sd = rr_cigarette_cessation_e_cig_standard_errors[2])) rr_cigarette_cessation_e_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_cessation_e_cig_point_estimates[3], sd = rr_cigarette_cessation_e_cig_standard_errors[3])) ## ## Cigarette Reinstatement: Age ## rr_cigarette_reinstatement_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) rr_cigarette_reinstatement_age_point_estimates_sample[,1] &lt;- 1 rr_cigarette_reinstatement_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_age_point_estimates[2], sd = rr_cigarette_reinstatement_age_standard_errors[2])) rr_cigarette_reinstatement_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_age_point_estimates[3], sd = rr_cigarette_reinstatement_age_standard_errors[3])) rr_cigarette_reinstatement_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_age_point_estimates[4], sd = rr_cigarette_reinstatement_age_standard_errors[4])) rr_cigarette_reinstatement_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_age_point_estimates[5], sd = rr_cigarette_reinstatement_age_standard_errors[5])) rr_cigarette_reinstatement_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_age_point_estimates[6], sd = rr_cigarette_reinstatement_age_standard_errors[6])) ## ## Cigarette Reinstatement: Sex ## rr_cigarette_reinstatement_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) rr_cigarette_reinstatement_sex_point_estimates_sample[,1] &lt;- 1 rr_cigarette_reinstatement_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_sex_point_estimates[2], sd = rr_cigarette_reinstatement_sex_standard_errors[2])) ## ## Cigarette Reinstatement: Income Level ## rr_cigarette_reinstatement_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) rr_cigarette_reinstatement_income_point_estimates_sample[,1] &lt;- 1 rr_cigarette_reinstatement_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_point_estimates[2], sd = rr_cigarette_reinstatement_income_standard_errors[2])) rr_cigarette_reinstatement_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_point_estimates[3], sd = rr_cigarette_reinstatement_income_standard_errors[3])) rr_cigarette_reinstatement_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_point_estimates[4], sd = rr_cigarette_reinstatement_income_standard_errors[4])) rr_cigarette_reinstatement_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_point_estimates[5], sd = rr_cigarette_reinstatement_income_standard_errors[5])) ## ## Cigarette Reinstatement: Income Change ## rr_cigarette_reinstatement_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) rr_cigarette_reinstatement_income_change_point_estimates_sample[,1] &lt;- 1 rr_cigarette_reinstatement_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_change_point_estimates[2], sd = rr_cigarette_reinstatement_income_change_standard_errors[2])) rr_cigarette_reinstatement_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_income_change_point_estimates[3], sd = rr_cigarette_reinstatement_income_change_standard_errors[3])) ## ## Cigarette Reinstatement: E-Cigarette ## rr_cigarette_reinstatement_e_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = e_cigarette_types) rr_cigarette_reinstatement_e_cig_point_estimates_sample[,1] &lt;- 1 rr_cigarette_reinstatement_e_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_e_cig_point_estimates[2], sd = rr_cigarette_reinstatement_e_cig_standard_errors[2])) rr_cigarette_reinstatement_e_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_cigarette_reinstatement_e_cig_point_estimates[3], sd = rr_cigarette_reinstatement_e_cig_standard_errors[3])) ## ## E-Cigarette Initiation: Age ## rr_e_cigarette_initiation_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) rr_e_cigarette_initiation_age_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_initiation_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_age_point_estimates[2], sd = rr_e_cigarette_initiation_age_standard_errors[2])) rr_e_cigarette_initiation_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_age_point_estimates[3], sd = rr_e_cigarette_initiation_age_standard_errors[3])) rr_e_cigarette_initiation_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_age_point_estimates[4], sd = rr_e_cigarette_initiation_age_standard_errors[4])) rr_e_cigarette_initiation_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_age_point_estimates[5], sd = rr_e_cigarette_initiation_age_standard_errors[5])) rr_e_cigarette_initiation_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_age_point_estimates[6], sd = rr_e_cigarette_initiation_age_standard_errors[6])) ## ## E-Cigarette Initiation: Sex ## rr_e_cigarette_initiation_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) rr_e_cigarette_initiation_sex_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_initiation_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_sex_point_estimates[2], sd = rr_e_cigarette_initiation_sex_standard_errors[2])) ## ## E-Cigarette Initiation: Income Level ## rr_e_cigarette_initiation_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) rr_e_cigarette_initiation_income_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_initiation_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_point_estimates[2], sd = rr_e_cigarette_initiation_income_standard_errors[2])) rr_e_cigarette_initiation_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_point_estimates[3], sd = rr_e_cigarette_initiation_income_standard_errors[3])) rr_e_cigarette_initiation_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_point_estimates[4], sd = rr_e_cigarette_initiation_income_standard_errors[4])) rr_e_cigarette_initiation_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_point_estimates[5], sd = rr_e_cigarette_initiation_income_standard_errors[5])) ## ## E-Cigarette Initiation: Income Change ## rr_e_cigarette_initiation_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) rr_e_cigarette_initiation_income_change_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_initiation_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_change_point_estimates[2], sd = rr_e_cigarette_initiation_income_change_standard_errors[2])) rr_e_cigarette_initiation_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_income_change_point_estimates[3], sd = rr_e_cigarette_initiation_income_change_standard_errors[3])) ## ## E-Cigarette Initiation: Cigarette Use ## rr_e_cigarette_initiation_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = cigarette_types) rr_e_cigarette_initiation_cig_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_initiation_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_cig_point_estimates[2], sd = rr_e_cigarette_initiation_cig_standard_errors[2])) rr_e_cigarette_initiation_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_initiation_cig_point_estimates[3], sd = rr_e_cigarette_initiation_cig_standard_errors[3])) ## ## E-Cigarette Cessation: Age ## rr_e_cigarette_cessation_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) rr_e_cigarette_cessation_age_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_cessation_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_age_point_estimates[2], sd = rr_e_cigarette_cessation_age_standard_errors[2])) rr_e_cigarette_cessation_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_age_point_estimates[3], sd = rr_e_cigarette_cessation_age_standard_errors[3])) rr_e_cigarette_cessation_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_age_point_estimates[4], sd = rr_e_cigarette_cessation_age_standard_errors[4])) rr_e_cigarette_cessation_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_age_point_estimates[5], sd = rr_e_cigarette_cessation_age_standard_errors[5])) rr_e_cigarette_cessation_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_age_point_estimates[6], sd = rr_e_cigarette_cessation_age_standard_errors[6])) ## ## E-Cigarette Cessation: Sex ## rr_e_cigarette_cessation_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) rr_e_cigarette_cessation_sex_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_cessation_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_sex_point_estimates[2], sd = rr_e_cigarette_cessation_sex_standard_errors[2])) ## ## E-Cigarette Cessation: Income Level ## rr_e_cigarette_cessation_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) rr_e_cigarette_cessation_income_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_cessation_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_point_estimates[2], sd = rr_e_cigarette_cessation_income_standard_errors[2])) rr_e_cigarette_cessation_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_point_estimates[3], sd = rr_e_cigarette_cessation_income_standard_errors[3])) rr_e_cigarette_cessation_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_point_estimates[4], sd = rr_e_cigarette_cessation_income_standard_errors[4])) rr_e_cigarette_cessation_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_point_estimates[5], sd = rr_e_cigarette_cessation_income_standard_errors[5])) ## ## E-Cigarette Cessation: Income Change ## rr_e_cigarette_cessation_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) rr_e_cigarette_cessation_income_change_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_cessation_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_change_point_estimates[2], sd = rr_e_cigarette_cessation_income_change_standard_errors[2])) rr_e_cigarette_cessation_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_income_change_point_estimates[3], sd = rr_e_cigarette_cessation_income_change_standard_errors[3])) ## ## E-Cigarette Cessation: Cigarette Use ## rr_e_cigarette_cessation_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = cigarette_types) rr_e_cigarette_cessation_cig_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_cessation_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_cig_point_estimates[2], sd = rr_e_cigarette_cessation_cig_standard_errors[2])) rr_e_cigarette_cessation_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_cessation_cig_point_estimates[3], sd = rr_e_cigarette_cessation_cig_standard_errors[3])) ## ## E-Cigarette Reinstatement: Age ## rr_e_cigarette_reinstatement_age_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = age_types) rr_e_cigarette_reinstatement_age_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_reinstatement_age_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_age_point_estimates[2], sd = rr_e_cigarette_reinstatement_age_standard_errors[2])) rr_e_cigarette_reinstatement_age_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_age_point_estimates[3], sd = rr_e_cigarette_reinstatement_age_standard_errors[3])) rr_e_cigarette_reinstatement_age_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_age_point_estimates[4], sd = rr_e_cigarette_reinstatement_age_standard_errors[4])) rr_e_cigarette_reinstatement_age_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_age_point_estimates[5], sd = rr_e_cigarette_reinstatement_age_standard_errors[5])) rr_e_cigarette_reinstatement_age_point_estimates_sample[,6] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_age_point_estimates[6], sd = rr_e_cigarette_reinstatement_age_standard_errors[6])) ## ## E-Cigarette Reinstatement: Sex ## rr_e_cigarette_reinstatement_sex_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = sex_types) rr_e_cigarette_reinstatement_sex_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_reinstatement_sex_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_sex_point_estimates[2], sd = rr_e_cigarette_reinstatement_sex_standard_errors[2])) ## ## E-Cigarette Reinstatement: Income Level ## rr_e_cigarette_reinstatement_income_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 5) rr_e_cigarette_reinstatement_income_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_reinstatement_income_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_point_estimates[2], sd = rr_e_cigarette_reinstatement_income_standard_errors[2])) rr_e_cigarette_reinstatement_income_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_point_estimates[3], sd = rr_e_cigarette_reinstatement_income_standard_errors[3])) rr_e_cigarette_reinstatement_income_point_estimates_sample[,4] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_point_estimates[4], sd = rr_e_cigarette_reinstatement_income_standard_errors[4])) rr_e_cigarette_reinstatement_income_point_estimates_sample[,5] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_point_estimates[5], sd = rr_e_cigarette_reinstatement_income_standard_errors[5])) ## ## E-Cigarette Reinstatement: Income Change ## rr_e_cigarette_reinstatement_income_change_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = 3) rr_e_cigarette_reinstatement_income_change_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_reinstatement_income_change_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_change_point_estimates[2], sd = rr_e_cigarette_reinstatement_income_change_standard_errors[2])) rr_e_cigarette_reinstatement_income_change_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_income_change_point_estimates[3], sd = rr_e_cigarette_reinstatement_income_change_standard_errors[3])) ## ## E-Cigarette Reinstatement: Cigarette Use ## rr_e_cigarette_reinstatement_cig_point_estimates_sample &lt;- matrix(nrow = sampling_number, ncol = cigarette_types) rr_e_cigarette_reinstatement_cig_point_estimates_sample[,1] &lt;- 1 rr_e_cigarette_reinstatement_cig_point_estimates_sample[,2] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_cig_point_estimates[2], sd = rr_e_cigarette_reinstatement_cig_standard_errors[2])) rr_e_cigarette_reinstatement_cig_point_estimates_sample[,3] &lt;- exp(rnorm(sampling_number, mean = rr_e_cigarette_reinstatement_cig_point_estimates[3], sd = rr_e_cigarette_reinstatement_cig_standard_errors[3])) 4.9 Generating the Final Parameter Set Sampling So, now we have sampled all the data that is required to finalize our parameter sets. The following code chunk takes the data extracted and generates a series of data frames. First, we want to generate the parameter sets. However, because we have so many individual RRs from our 6 models, it is convenient to just merge relative risks. Meaning, instead of saving the relative risk for age X and for sex Y and for income level Z and for income change W and for e-cigarette status E, it is more convenient to save the product of the RRs to get a single RR for participants [age = X, sex = Y, income = Z, income change = W, e-cigarette status = E]. However, for potential scenario analyses and sensitivity analyses, we need to save the specifc RRs so that we may modify transition rates appropriately. Thus in this step we not only generate the full parameter set with the RR products, but we also save the specific RRs for each variable and transition. ## First, we allocate memory for the data.frames we will output ## parameter_set will be the final set of sampled parameters parameter_set &lt;- NA ## The additional data frames will be to save factor specific RRs that may then be used to modify the parameter set ## When it is called for in given scenario and sensitivity analyses age_RRs &lt;- NA sex_RRs &lt;- NA income_RRs &lt;- NA income_change_RRs &lt;- NA cigarette_RRs &lt;- NA e_cigarette_RRs &lt;- NA ## These vectors are helper functions ## While we have 13 income compartments, they technically only correspond to 5 income levels, where compartment at the same income level represent differently stability/transitionary trajectories ## income_5_cat takes a given compartment and converts it into the appropriate income level (i.e. someone in the increased to &gt;$100k compartment [i.e. compartment 13] tho we want income_5_cat[13] to correspond to 5 = &gt;$100k) ## this important because our relative risks for income change only have 5 levels and there is a seperate term (income_change) which includes an RR based on whether income is stable or transitionary income_5_cat &lt;- c(1,2,3,4,5,1,2,3,4,2,3,4,5) ## thus we also need to be able to identify from the income compartment if the person is stable, increasing, or decreasing ## the income stable compartments (i.e. 1 - 5) all map to 1 = stable ## the decreased from previous compartments (i.e. 6-9) all map to 2 = decreased ## the increased from previous compartments (i.e. 10-13) all map to 3 = increased income_change_3_cat &lt;- c(1,1,1,1,1,2,2,2,2,3,3,3,3) ## In an earlier version of the model we had discussed how long individuals would stay in a transitionary income bracket prior to moving to the stable income compartment ## We decided, given our statistical models can only reflect on the prior year, that the value should be set to 1 year ## The staging_modifieer captures this idea ## If future endeavors wish to modify how long people stay in the transitionary state before moving to the stable state, this is the variable that should be modified. staging_modifier &lt;- 1 ## We loop through each of the samples to generate the final parameter sets for(sim_number in 1:sampling_number){ ## ## First we will finalize our absolute transition rates for income, cigarette, and e-cigarette use ## Our Dirichlet samples provided probabilities but we want rates ## Waves 2 and 3 of PATH are one year apart (i.e. t = 1) ## So we use the following equation rate = -ln(1 - probability) ## income_transition_rates &lt;- income_transitions_sample[sim_number,] income_transition_rates &lt;- -1*log(1 - income_transition_rates) cigarette_transition_rates &lt;- cigarette_transitions_sample[sim_number,] cigarette_transition_rates &lt;- -1*log(1 - cigarette_transition_rates) e_cigarette_transition_rates &lt;- e_cigarette_transitions_sample[sim_number,] e_cigarette_transition_rates &lt;- -1*log(1 - e_cigarette_transition_rates) ## ## While we extracted a lot of specific RRs, it is convenient to convert them into RRs that correspond to the specific compartment someone is in ## In other words, we want to calculate the RR for someone in the compartment [age = A, sex = S, cigarette status = C, e-cigarette status = E, income = I] ## Thus, we will loop through and multiply the appropriate RRs together to get these new RRs ## This will be convenient when we feed the parameter set into the ODE solver as it will greatly reduce the number of parameters we need to pass in to the solver ## Thus, we need to generate 6 specific relative risk objects ## Relative risks for cig initiation, cig cessation, cig reinstatement ## ecig initiation, ecig cessation, ecig reinstatement ## We will do this by multiplying the sampled relative risks for each specific thing together ## ## We will start with the cigarette transition RRs ## We will allocate memory for objects corresponding to the 3 transitions ## Each cell in the arrays corresponds to an [age,sex,ecig,income] combination ## We note that cig status is not included here because RRs are applied to specific cig status ## (i.e. the initiation RRs are only applied to never smokers) rr_cigarette_initiation &lt;- toArray(rep(1, sex_types*age_types*e_cigarette_types*income_types), dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_cessation &lt;- toArray(rep(1, sex_types*age_types*e_cigarette_types*income_types), dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_reinstatement &lt;- toArray(rep(1, sex_types*age_types*e_cigarette_types*income_types), dim = c(sex_types,age_types,e_cigarette_types,income_types)) ## We will then loop through every combination of the noted strata for(sex in 1:sex_types){ for(age in 1:age_types){ for(e_cig in 1:e_cigarette_types){ for(income in 1:income_types){ ## For each RR, we have 5 terms we need to account for: age, sex, e-cig status, income level (5 category) and income change ## We use the income_5_cat and income_change_3_cat vector to get the appropriate values for extracting the right RRs rr_cigarette_initiation[sex,age,e_cig,income] &lt;- rr_cigarette_initiation_age_point_estimates_sample[sim_number,age]*rr_cigarette_initiation_sex_point_estimates_sample[sim_number,sex]*rr_cigarette_initiation_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_cigarette_initiation_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_cigarette_initiation_e_cig_point_estimates_sample[sim_number,e_cig] rr_cigarette_cessation[sex,age,e_cig,income] &lt;- rr_cigarette_cessation_age_point_estimates_sample[sim_number,age]*rr_cigarette_cessation_sex_point_estimates_sample[sim_number,sex]*rr_cigarette_cessation_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_cigarette_cessation_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_cigarette_cessation_e_cig_point_estimates_sample[sim_number,e_cig] rr_cigarette_reinstatement[sex,age,e_cig,income] &lt;- rr_cigarette_reinstatement_age_point_estimates_sample[sim_number,age]*rr_cigarette_reinstatement_sex_point_estimates_sample[sim_number,sex]*rr_cigarette_reinstatement_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_cigarette_reinstatement_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_cigarette_reinstatement_e_cig_point_estimates_sample[sim_number,e_cig] } } } } ## We now repeat this process with the e_cigarette relative risks rr_e_cigarette_initiation &lt;- toArray(rep(1, sex_types*age_types*cigarette_types*income_types), dim = c(sex_types,age_types,cigarette_types,income_types)) rr_e_cigarette_cessation &lt;- toArray(rep(1, sex_types*age_types*cigarette_types*income_types), dim = c(sex_types,age_types,cigarette_types,income_types)) rr_e_cigarette_reinstatement &lt;- toArray(rep(1, sex_types*age_types*cigarette_types*income_types), dim = c(sex_types,age_types,cigarette_types,income_types)) ## We loop through every combination for(sex in 1:sex_types){ for(age in 1:age_types){ for(cig in 1:cigarette_types){ for(income in 1:income_types){ ## And then take the products of the appropriate RRs to get a single RR rr_e_cigarette_initiation[sex,age,cig,income] &lt;- rr_e_cigarette_initiation_age_point_estimates_sample[sim_number,age]*rr_e_cigarette_initiation_sex_point_estimates_sample[sim_number,sex]*rr_e_cigarette_initiation_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_e_cigarette_initiation_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_e_cigarette_initiation_cig_point_estimates_sample[sim_number,cig] rr_e_cigarette_cessation[sex,age,cig,income] &lt;- rr_e_cigarette_cessation_age_point_estimates_sample[sim_number,age]*rr_e_cigarette_cessation_sex_point_estimates_sample[sim_number,sex]*rr_e_cigarette_cessation_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_e_cigarette_cessation_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_e_cigarette_cessation_cig_point_estimates_sample[sim_number,cig] rr_e_cigarette_reinstatement[sex,age,cig,income] &lt;- rr_e_cigarette_reinstatement_age_point_estimates_sample[sim_number,age]*rr_e_cigarette_reinstatement_sex_point_estimates_sample[sim_number,sex]*rr_e_cigarette_reinstatement_income_point_estimates_sample[sim_number, income_5_cat[income]]*rr_e_cigarette_reinstatement_income_change_point_estimates_sample[sim_number,income_change_3_cat[income]]*rr_e_cigarette_reinstatement_cig_point_estimates_sample[sim_number,cig] } } } } ## ## While these previous steps represent the finalization of our parameter set, ## For some potential scenario analyses we want to save our various RRs that we can modify the overall RRs ## For example, if we wanted to assume that everyone had the same income risk, we could use the saved income RRs to modify overall risk ## We store these values here -- we highlight that using these as a reference can inform how to use these vectors to modify scenario analyses (i.e. to see which values are at which location) age_RR_sim &lt;- c(rr_cigarette_initiation_age_point_estimates_sample[sim_number,],rr_cigarette_cessation_age_point_estimates_sample[sim_number,],rr_cigarette_reinstatement_age_point_estimates_sample[sim_number,], rr_e_cigarette_initiation_age_point_estimates_sample[sim_number,],rr_e_cigarette_cessation_age_point_estimates_sample[sim_number,],rr_e_cigarette_reinstatement_age_point_estimates_sample[sim_number,]) sex_RR_sim &lt;- c(rr_cigarette_initiation_sex_point_estimates_sample[sim_number,],rr_cigarette_cessation_sex_point_estimates_sample[sim_number,],rr_cigarette_reinstatement_sex_point_estimates_sample[sim_number,], rr_e_cigarette_initiation_sex_point_estimates_sample[sim_number,],rr_e_cigarette_cessation_sex_point_estimates_sample[sim_number,],rr_e_cigarette_reinstatement_sex_point_estimates_sample[sim_number,]) income_RR_sim &lt;- c(rr_cigarette_initiation_income_point_estimates_sample[sim_number,],rr_cigarette_cessation_income_point_estimates_sample[sim_number,],rr_cigarette_reinstatement_income_point_estimates_sample[sim_number,], rr_e_cigarette_initiation_income_point_estimates_sample[sim_number,],rr_e_cigarette_cessation_income_point_estimates_sample[sim_number,],rr_e_cigarette_reinstatement_income_point_estimates_sample[sim_number,]) income_change_RR_sim &lt;- c(rr_cigarette_initiation_income_change_point_estimates_sample[sim_number,],rr_cigarette_cessation_income_change_point_estimates_sample[sim_number,],rr_cigarette_reinstatement_income_change_point_estimates_sample[sim_number,], rr_e_cigarette_initiation_income_change_point_estimates_sample[sim_number,],rr_e_cigarette_cessation_income_change_point_estimates_sample[sim_number,],rr_e_cigarette_reinstatement_income_change_point_estimates_sample[sim_number,]) e_cig_RR_sim &lt;- c(rr_cigarette_initiation_e_cig_point_estimates_sample[sim_number,],rr_cigarette_cessation_e_cig_point_estimates_sample[sim_number,],rr_cigarette_reinstatement_e_cig_point_estimates_sample[sim_number,]) cig_RR_sim &lt;- c(rr_e_cigarette_initiation_cig_point_estimates_sample[sim_number,],rr_e_cigarette_cessation_cig_point_estimates_sample[sim_number,],rr_e_cigarette_reinstatement_cig_point_estimates_sample[sim_number,]) ## ## Now we are going to finalize our parameter set ## Please take note of the indicies of each of the parameters ## This will be important for when we feed the parameter sets into the ODE solver ## So that we can make the appropriate references to the right values ## parameters &lt;- income_transition_rates ## 1 - 150 parameters &lt;- c(parameters, staging_modifier) ## 151 parameters &lt;- c(parameters, toVector(cigarette_transition_rates)) ## 152 - 160 parameters &lt;- c(parameters, toVector(e_cigarette_transition_rates)) ## 161 - 169 parameters &lt;- c(parameters, toVector(rr_cigarette_initiation)) ## 169 - 637 parameters &lt;- c(parameters, toVector(rr_cigarette_cessation)) ## 638 - 1105 parameters &lt;- c(parameters, toVector(rr_cigarette_reinstatement)) ## 1106 - 1573 parameters &lt;- c(parameters, toVector(rr_e_cigarette_initiation)) ## 1574 - 2041 parameters &lt;- c(parameters, toVector(rr_e_cigarette_cessation)) ## 2042 - 2509 parameters &lt;- c(parameters, toVector(rr_e_cigarette_reinstatement)) ## 2510 - 2977 ## The last step then is to store the results ## If it is the first parameter set, we initialize the final data frames if(is.na(parameter_set)){ ## We want to store the parameter sets parameter_set &lt;- as.data.frame(matrix(parameters, nrow = 1)) ## And we want to store the specific RRs for future use age_RRs &lt;- as.data.frame(matrix(age_RR_sim, nrow = 1)) sex_RRs &lt;- as.data.frame(matrix(sex_RR_sim, nrow = 1)) income_RRs &lt;- as.data.frame(matrix(income_RR_sim, nrow = 1)) income_change_RRs &lt;- as.data.frame(matrix(income_change_RR_sim, nrow = 1)) cigarette_RRs &lt;- as.data.frame(matrix(cig_RR_sim, nrow = 1)) e_cigarette_RRs &lt;- as.data.frame(matrix(e_cig_RR_sim, nrow = 1)) ## If it is not the first parameter set, we add the values to the already created data.frames }else{ parameter_set &lt;- rbind(parameter_set, parameters) age_RRs &lt;- rbind(age_RRs, age_RR_sim) sex_RRs &lt;- rbind(sex_RRs, sex_RR_sim) income_RRs &lt;- rbind(income_RRs, income_RR_sim) income_change_RRs &lt;- rbind(income_change_RRs, income_change_RR_sim) cigarette_RRs &lt;- rbind(cigarette_RRs, cig_RR_sim) e_cigarette_RRs &lt;- rbind(e_cigarette_RRs, e_cig_RR_sim) } } 4.10 Output the Results Finally, we outpu the final data.frames. We note that a parameter set name is included in the saved file so that analyses from the same parameter set are easy to keep track of. write.csv(parameter_set,paste(&quot;Data/Parameter_Sets/Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(age_RRs,paste(&quot;Data/Parameter_Sets/Age_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(sex_RRs,paste(&quot;Data/Parameter_Sets/Sex_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(income_RRs,paste(&quot;Data/Parameter_Sets/Income_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(income_change_RRs,paste(&quot;Data/Parameter_Sets/Income_Change_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(cigarette_RRs,paste(&quot;Data/Parameter_Sets/Cig_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(e_cigarette_RRs,paste(&quot;Data/Parameter_Sets/E_Cig_RRs_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) we dont need to define absolute transitions for age nor sex because age transitions occur at regular intervals and we arent allowing transitions across sex compartments havent hand counted "],["start.html", "Chapter 5 Initial Start State 5.1 Stratifying by Sex and Age 5.2 Stratifying the Population by Income Level 5.3 Distributing Cigarette Use 5.4 Distributing E-Cigarette Use 5.5 Saving the States", " Chapter 5 Initial Start State We need to initialize our model to be representative of the US population. While the PATH study is designed to be representative, it is not weighted to ensure the correct proporiton of former smokers and the correct income distribution is represented. In other words, the PATH dataset over-samples former smokers (under samples never smokers) and the weighting does not effectively account for this. Therefore to get our starting state, we need to generate a reasonable population distribution such that our model is simulating the adult US population. Note, this model is initialized to the year 2014. 5.1 Stratifying by Sex and Age https://www.census.gov/data/tables/2014/demo/age-and-sex/2014-age-sex-composition.html We can start by stratifying the population by sex and age. Table 1 at the link above provides us the data that we need to get these breakdowns. Analyzing the data, we see that the adult population in the US 2014 can be broken down as: 18-24 Year Old Male: 6.4% Female: 6.2% 25-34 Male: 8.9% Female: 8.9% 35-44 Male: 8.2% Female: 8.4% 45-54 Male: 8.8% Female: 9.2% 55-64 Male: 7.9% Female: 8.6% 65+ Male: 8.2% Female: 10.3% Overall, this results in a population that is 51.6% female. toArray &lt;- function(vector, dim = c(2,6,3,3,13)){ array_structure &lt;- array(dim = dim) return(replace(array_structure, TRUE, vector)) } male_by_age &lt;- c(0.064, 0.089, 0.082, 0.088, 0.079, 0.082) female_by_age &lt;- c(0.062, 0.089,0.084,0.092,0.086,0.103) states &lt;- toArray(rep(NA, 12), dim = c(2,6)) states[1,] &lt;- male_by_age states[2,] &lt;- female_by_age 5.2 Stratifying the Population by Income Level https://www.census.gov/data/tables/time-series/demo/income-poverty/cps-hinc/hinc-01.2014.html By multiplying the distribution of household income by the average number of people in household of given income, we are able to estimate the distribution of income by person. Using data (link above) from 2014 Census table HINC-01, we are able to estimate the following income distribution: &lt;$10k: 5% $10-25k: 12% $25-50k: 21% $50-100k: 31% +$100k: 31% While income distributions are likely heterogenous across age group, household income is more complicated to capture than personal income. For example, an 19 year old in college might make 0 money and be in the &gt;$100k group. Similarly, a working 19 year old with no parental support may fall in the 10-25k range even though they are actually netting more personal income. Given challenges in figuring out differential income across age and sex, we have opted to assume a homogenous income distribution across age and sex. As well, our model has 13 income brackets because our model tries to capture the impact of income level changes. We initialize our start state with everyone in one of the 5 income stable groups. temp &lt;- states income_dist &lt;- c(0.05, 0.12,0.21,0.31,0.31) states &lt;- toArray(rep(0, 156), dim = c(2,6,13)) states[1,,1] &lt;- temp[1,]*income_dist[1] states[1,,2] &lt;- temp[1,]*income_dist[2] states[1,,3] &lt;- temp[1,]*income_dist[3] states[1,,4] &lt;- temp[1,]*income_dist[4] states[1,,5] &lt;- temp[1,]*income_dist[5] states[2,,1] &lt;- temp[2,]*income_dist[1] states[2,,2] &lt;- temp[2,]*income_dist[2] states[2,,3] &lt;- temp[2,]*income_dist[3] states[2,,4] &lt;- temp[2,]*income_dist[4] states[2,,5] &lt;- temp[2,]*income_dist[5] 5.3 Distributing Cigarette Use To initialize our starting cigarette levels, we will use CDC data. https://www.cdc.gov/mmwr/volumes/65/wr/mm6527a1.htm They estimate that in 2013-4, 17% of the population smoked cigarettes. 19.3% of males were current smokers and 15.7% of females were current smokers. This work, however, does not provide the same income distribution. Next they present the smoking prevalence by age, with 17% of those 18-24 smoking, 21.4% of those 25-44, 17.8% of those 45-64, and 7.9% of those 65+. The breakdown by income is not by the same categories and they report: &lt;$20k: 28.7% (27.1 - 30.4) 20-50k: 21.7% (20.8 - 22.6) 50-100k: 14.1% (13.4 - 14.9) +100k: 8.0% (7.3 - 8.7) Unspecified: 17.2% (16.4 - 18.1) However, we need to realign to match up with &lt;10k, 10-25, 25-50k. And we need these values to correspond with a 17% smoking prevalence. Given the dose response relationship, we hypothesize that the &lt;10k reasonably would have the highest proportion of cigarette use. Using the CDC prevalences, with a higher prevalence for &lt;$10k, results in a sample current smoking of 17%. &lt;$10k: 32.0% 10-25k: 28.7% 25-50k: 21.7% 50-100k: 14.1% +100k: 8.0% For current cigarette smoking, CDC reports 21.9% of the population in 2014 was a former smoker, though determining income breakdown is challenging. We make the following assumptions in defining the number of former smokers: that more men than women are former smokers because more men than women smoke that older age is has higher prevalence of cigarette smoking that higher incomes have higher prevalence of former smoking Further, a recent study (2018, https://www.cdc.gov/nchs/data/nhsr/nhsr145-508.pdf) estimated that for men over 65, 49.4% were former smokers and for women over 65, 30.6% were smokers. We assume slighlty diminished totals in 2014 (44% and 25%) and use these as baselines which we adjust based on age and income. cig_by_sex &lt;- c(.193/.17,.157/.17) ## This is amultiplier, in which men are more likely than women to be smokers cig_by_age &lt;- c(.17/.17,.214/.17,.214/.17,.178/.17,.178/.17,.079/.17) ## multiplier for age cig_by_income &lt;- c(.32,.287,.217,.141,.08) ## Then we use the proportion across income #former_smoke_baseline &lt;- 0.209 ## Chosen to ensure we get the appropriate final distribution former_by_sex &lt;- c(0.46,.27) ## largely matches the cig_by_sex object former_by_age &lt;- c(.3,.4,.5,.6,.8,1) ## we assume this relationship isn&#39;t linear former_by_income &lt;- c(.4, .6, .8,1,1.2) ## consistent with literature about the association of income and cessation rates temp &lt;- states states &lt;- toArray(rep(0, 156*3), dim = c(2,6,3,13)) for(sex in c(1,2)){ for(age in 1:6){ for(income in 1:5){ cell_total &lt;- temp[sex,age,income] current_cig &lt;- cell_total*cig_by_sex[sex]*cig_by_age[age]*cig_by_income[income] former_cig &lt;- cell_total*former_by_sex[sex]*former_by_age[age]*former_by_income[income] states[sex,age,3,income] &lt;- former_cig states[sex,age,2,income] &lt;- current_cig states[sex,age,1,income] &lt;- cell_total - current_cig - former_cig } } } 5.4 Distributing E-Cigarette Use Finally, we need to distribute e-cigarette use. In 2014, CDC estimates indicate that 3.3% of the population used e-cigarettes: 4% of Males 2.8% of Females Young People Much Higher Rates 18-24: 5.5% 25-44: 4.4% 45-64: 2.8% 65+: 0.9% Income Dynamics Not as Pronounced &lt;20k: 4% 20-50k: 4.2% 50-100k: 3.3% +100k: 2.3% CDC MMWR Report (https://www.cdc.gov/mmwr/volumes/65/wr/mm6542a7.htm) shows that: 58.5% of e-cigarette users were cigarette smokers 29.8% were former smokers 11.4% were never smokers 98.7% of those &gt;45 were current or former cigarette smokers 60% of those 18-24 were current or former cigarette smokers Full breakdown by age: 18 - 24: 42% current cigarette 18% former cigarette 40% never cigarette 25 - 44: 59% current cigarette 31% former cigarette 10% never cigarette 45+ 67% current 32% former 1% never We will use these values to distribute e-cigarette use across the compartments. Further, we will assume an equal number of former e-cigarette users for each sex,age,income,cigarette use combo given challenges in estimating this temp &lt;- states ecig_sex &lt;- c(0.04, 0.028) ecig_age &lt;- c(0.055,0.044,0.044,0.028,0.028,0.009)/.033 ecig_income &lt;- c(0.05,0.045,0.042,0.033,0.023)/.033 ## ## This is the proportion of e-smokers who are cigarette users ## We need the proportion of cigarette smokers who are e_cig users states &lt;- toArray(0) age_cig_effect &lt;- toArray(0, dim = c(6,3)) age_cig_effect[1,] &lt;- c(.4,.42,.18) age_cig_effect[2,] &lt;- c(.1,.59,.31) age_cig_effect[3,] &lt;- c(.1,.59,.31) age_cig_effect[4,] &lt;- c(.01,.67,.32) age_cig_effect[5,] &lt;- c(.01,.67,.32) age_cig_effect[6,] &lt;- c(.01,.67,.32) ## ## Ok so the values currently saved in age_cig_effect ## are the proportion of e_cig users who also use cigs ## but we want the proportion of people at each cig level who are also e-cig users ## so we use the proportions available to use ## ## to get what we want we let x = the % of e-cig at cig level c and age a ## we let y = % of people who use e-cigs at age a ## and we let z = % of people at cig level c ## we then can get our value by calculated x*y/z ## for(age in 1:6){ for(cig in 1:3){ y &lt;- ecig_age[age]*.033 z &lt;- sum(c(temp[,age,cig,]))/sum(c(temp[,age,,])) age_cig_effect[age,cig] &lt;- age_cig_effect[age,cig]*y/z } } for(sex in 1:2){ for(age in 1:6){ for(income in 1:5){ for(cig in 1:3){ cell_total &lt;- temp[sex,age,cig,income] e_cig &lt;- cell_total*age_cig_effect[age,cig] former_ecig &lt;- e_cig never_ecig &lt;- cell_total - e_cig - former_ecig states[sex,age,cig,1,income] &lt;- never_ecig states[sex,age,cig,2,income] &lt;- e_cig states[sex,age,cig,3,income] &lt;- former_ecig } } } } 5.5 Saving the States Finally, we want to save the states for future use. We will save it in a data.frame where the only column is the vector of states. states &lt;- as.data.frame(toVector(states)) write.csv(states,&quot;Data/Initial_State.csv&quot;) "],["ode.html", "Chapter 6 ODE Functions 6.1 ODE Function", " Chapter 6 ODE Functions Prior to the next steps, we need to define the ODE (ordinary differential equations) solver for our model. This function is what we will call to run the model. So we need to define it prior to both the calibration and simulations steps. While the model is described in full detail in the manuscript, the main thing is that this model stratifies the population across 5 factors: age, sex, cigarette use status, e-cigarette use status, and household income. A few notes on the implementation of the model: We use a dimensional coding strategy We only permit transitions across one strata at a time To improve runtime, the function is sex specific No transitions are permitted across sex so can run separately As shall be shown in the calibration and simulation stages, we will parallelize the running of the model across sex to improve runtime Finally, the function is intended to be run for initial never, current, and former smokers By stratifying model runs, we are able to explore the impact of income on cigarette use amongst specific sub-populations Lastly, R is not the fastest language for coding ODE models While R has many excellent features, speed is not one of them In particular, R has a hard time with for loops and if-else statements R runs faster when objects are vectorized (as opposed to running loops) As such, we have minimized the number of loops (some are necessary) And we have included no if-else statements in the code Instead we frequently use boolean vectors which have 0s and 1s and use multiplication to get the same results as if-else statements without sacrificing runtime 6.1 ODE Function The ODE function is included below. Because it is a single function, it must be presented within one code chunk. Comments in the code are provided to clarify how the model functions: ## ## To be in alignment with the functionality of the deSolve package which runs the ODE ## We have 3 arguments fed into the function: t for time, states, and parameters ## For this model, we largely ignore the t argument, as model doesn&#39;t behave differently at different times ## ## ## An additional note, this model is intended to be run for men and women separately and to be run separately for ## never smokers, current smokers, and former smokers at t = 0. ## The code can be modified to be run on the whole population, but the current approach provides two benefits: ## 1) We can parallelize the code to have it run faster ## 2) We can compare the impact of income among people who are never, current, and former smokers at the start. ## This is cool because we are curious if say income drives initiation, cessation, and reinstatement at different rates ## ODE_function &lt;- function(t, states, parameters){ ## First we convert the states vector into an array ## In this format, states is a 5-D array such that states[age,sex,cig,e-cig,income] corresponds to a compartment in the model states &lt;- toArray(states) ## ## For ease of reading and practical purposes, we highlight the number of categories for each strata ## And we, in the comments, highlight which values correspond with which levels ## Keeping this handy can help with navigating what each step is doing sex_types &lt;- 2 ## 1 == Male, 2 == Female age_types &lt;- 6 ## 1 = 18-24, 2 = 25-34, 3 = 35-44, 4 = 45-54, 5 = 55-64, 6 = 65+ cigarette_types &lt;- 3 ## 1 = Never Smoker, 2 = Current Smoker, 3 = Former Smoker e_cigarette_types &lt;- 3 ## 1 = Never ESmoker, 2 = Current ESmoker, 3 = Former ESmoker income_types &lt;- 13 ## 1 = &lt;10k annually, 6 = &lt;10, decreased from previous ## 2 = 10-25k, 7 = 10-25k decreased from previous, 10 = 10-25k increased from previous ## 3 = 25-50k, 8 = 25-50k decreased from previous, 11 = 25-50k increased from previous ## 4 = 50-100k, 9 = 50-100k decreased from previous, 12 = increased from previous ## 5 = &gt;100k, 13 = &gt;100k increased from previous ## While we sampled transition rates for cig use, e-cig use, and income ## We can hard code age transitions because age has a discrete relationship with time ## Thus, the transition is 1/(time spent in compartment) ## For example, an 18 year old would spend 7 years in the 18-24 year old compartment ## Thus the transition rate is 1/7 age_transitions &lt;- c(1/7,0.1,0.1,0.1,0.1,0) ## This vector was created to avoid the use of an if-statement. It&#39;s application is detailed later. age_in &lt;- c(2,2,3,4,5,6) ## For calculating transitions between income compartments ## We need to know, first, which income compartmens feed into a given compartment ## This list provides vectors which correspond to which compartments can feed the given compartment ## For example, income_transition_sources[8] indicates that a person can transition from compartments 4, 5, 9, 12, or 13 into compartment 8 income_transition_sources &lt;- list(c(6), ## 1 c(7,10), ## 2 c(8,11), ## 3 c(9,12), ## 4 c(13), ## 5 c(2,3,4,5,7,8,9,10,11,12,13), ## 6 c(3,4,5,8,9,11,12,13), ## 7 c(4,5,9,12,13), ## 8 c(5,13), ##9 c(1,6), ## 10 c(1,2,6,7,10), ## 11 c(1,2,3,6,7,8,10,11), ## 12 c(1,2,3,4,6,7,8,9,10,11,12))## 13 ## Second, we need to know which income compartments a person can transition to from their current one ## For example, income_transition_landings[8] indicates that a person can transition from compartment8 to compartments 3, 6, 7, 12, or 13 income_transition_landings &lt;- list(c(10,11,12,13), ## 1 c(6,11,12,13), ## 2 c(6,7,12,13), ## 3 c(6,7,8,13), ## 4 c(6,7,8,9), ## 5 c(1,10,11,12,13), ## 6 c(2,6,11,12,13), ## 7 c(3,6,7,12,13), ## 8 c(4,6,7,8,13), ##9 c(2,6,11,12,13), ## 10 c(3,6,7,12,13), ## 11 c(4,6,7,8,13), ## 12 c(5,6,7,8,9))## 13 ## inputting input_5_cat[income_category] will return the value of just the income ## (i.e. 10-25, increased to 10-25k, and decreased to 10-25k will all map to 10-25k) ## (in other words income_5_cat[2] = income_5_cat[7] = income_5_cat = [10]) income_5_cat &lt;- c(1,2,3,4,5,1,2,3,4,2,3,4,5) ## These are the income transition rates that were sampled and fed into the function along with the parameters ## They only correspond to transitions between the 5 income levels, the ODE solver will handle identifying which specific compartments the transitions occur between income_transitions &lt;- toArray(parameters[1:150],dim = c(age_types, 5, 5)) ## the staging modifier controls how long individuals stay in the transitionary compartments assuming that they stay at the same income ## For this modeling project, the value is hard-coded at zero -- however, we leave this here so that future efforts may easily modify this value if desired. staging_modifier &lt;- parameters[151] ## We then get the sampled cigarette and e-cigarette transition rates from the parameters cigarette_transitions &lt;- toArray(parameters[152:160],dim = c(cigarette_types,cigarette_types)) e_cigarette_transitions &lt;- toArray(parameters[161:169],dim = c(e_cigarette_types, e_cigarette_types)) ## While we extracted the abolsute transition rates for cigarette use from the PATH data, ## We believe that these absolute rates may be biased in ways that the weighting strategy did not control for ## The initiation modifier and cessation modifier are applied to calibrate the cigarette initiation and cessation absolute rates ## so that the model accurately projects historical cigarette use data ## As a reminder, this model is initialized for the year 2014 and we have cigarette data through 2019 (as of writing this) ## Therefore, we want to ensure that our model accurately projects the cigarette use prevalence and former cigarette use prevalence of the overall population over that 5 year period initiation_mod &lt;- parameters[3061] cessation_mod &lt;- parameters[3062] ## Apply the initiation modifier cigarette_transitions[1,2] &lt;- cigarette_transitions[1,2]*initiation_mod ## Apply the cessation modifier cigarette_transitions[2,3] &lt;- cigarette_transitions[2,3]*cessation_mod ## Next we want to identify our sampled relative risks, these will be applied to modify transitions between comaprtments rr_cigarette_initiation &lt;- toArray(parameters[170:637], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_cessation &lt;- toArray(parameters[638:1105], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_reinstatement &lt;- toArray(parameters[1106:1573], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_initiation &lt;- toArray(parameters[1574:2041], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_cessation &lt;- toArray(parameters[2042:2509], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_reinstatement &lt;- toArray(parameters[2510:2977], dim = c(sex_types,age_types,e_cigarette_types,income_types)) ## This rr_e_cigarette transitions object was created to avoid the use of a series of if-statements ## Depending on which e-cigarette value the model is currently considering, this array can be called to get the appropriate RR without needing to use an if-else series rr_e_cigarette_transitions &lt;- toArray(rep(0, 3*sex_types,age_types,e_cigarette_types, income_types), dim = c(3,sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_transitions[1,,,,] &lt;- rr_e_cigarette_initiation rr_e_cigarette_transitions[2,,,,] &lt;- rr_e_cigarette_cessation rr_e_cigarette_transitions[3,,,,] &lt;- rr_e_cigarette_reinstatement ## Similarly, this vector is to avoid the use of an if-statement ## cig_out[x] = the compartment that one can get to from x ## 1 = never, 2 = current, 3 = former so we see that ## cig_ou[1] = 2 means that the only cigarette transition from never use is to current use cig_out &lt;- c(2,3,2) ## Similarly, this list of vectors represents which compartments transitions can occur from ## For example, no compartments feed the never smoker compartment ## the current smoker compartment can be fed by never smoker and former smoker cig_in &lt;- list(c(0,0,0), c(1,0,1), c(0,1,0)) ## ## Finally need death parameters ## Will use CDC life tables to get death https://www.cdc.gov/nchs/products/life_tables.htm ## Will stratify death rates by age and sex ## Death rate is computed as follows: ## First, the probability of death between ages X and X+1 were extracted from the lifetable ## For each age range, the median probability was sampled ## For the over 65 group, we exlcuded the &gt;100 category because the probability of death was 100% ## The probabilities were then converted into rates using the formula: rate = -ln(1 - probability) death_rates &lt;- toArray(rep(NA,sex_types*age_types), dim = c(sex_types,age_types)) death_rates[1,] &lt;- -1*log(1 - c(0.001286, 0.001835, 0.002426, 0.004763, 0.011045, 0.069452)) death_rates[2,] &lt;- -1*log(1 - c(0.000471, 0.000801, 0.001373, 0.002971, 0.006655, 0.051681)) ## ## We also need excess mortality related to cigarette use ## These RRs were extracted from DOI: excess_cigarette_death_RR &lt;- toArray(rep(NA,sex_types*cigarette_types), dim = c(sex_types,cigarette_types)) excess_cigarette_death_RR[1,] &lt;- c(1,2.24,1.30) excess_cigarette_death_RR[2,] &lt;- c(1,2.29,1.35) ## Entries Multiplier is used to avoid the use of an if-statement ## We only want entries to occur for the 18-24 group ## so we use entries[age] to get the appropriate multiplier ## we return 1 for 18-24 and 0 for all other ages entries &lt;- c(1,0,0,0,0,0) ## for entries, we need the population growth rate ## we will apply this growth rate to the entry totals in the younglings object to calibrate to the correct population growth from 2014-2019 growth_rate &lt;- parameters[3060] ## The younglings object is also to account for an issue raised with parellizing the model ## This then allows us to feed the correct number of entries into each cell of the model regardless of the fact that the model is split into 6 sub-models ## Essentially, a primary issue is that the the use of tobacco products is drastically changing among youth starting with the widespread adoption of e-cigs ## This change began to occur during the study period. Recent estimates have indicated that in 2019 that only 5% of high schoolers smoker but over 20% use e-cigs (https://jamanetwork.com/journals/jama/fullarticle/2755265#:~:text=In%202019%2C%20an%20estimated%2027.5,use%20of%20any%20tobacco%20product.) ## As such, we created the younglings object to represent the number of compartment entries into the model ## The younglings object assumes a greater prevalence of e-cig use than cigarette use ## Data also indicates that the 18-24 year old smoking prevalence declined from around 17% in 2014 to only 8% in 2019 ## Further, the number of former smokers has not changed much despite a drop in current cigarette users ## This phenomenon appears to be explained by the lower rates of cigarette use among youth younglings &lt;- toArray(parameters[2979:3056], dim = c(2,3,13)) ## We apply the growth rate here to ensure the population growth is calibrated appropriately. ## Technically, the US population has been declining for several years ## So we also want to apply a decay function so that the trajectory of the population increase is declining ## The exponentiated term should result in the growth rate having diminished impact over time younglings &lt;- younglings*(growth_rate)^((50-t)/50)*sum(toVector(states)) ## To avoid an if-statement, this is used to indicate if the model is for never smokers at t = 0, current, or former. youngling_mult &lt;- parameters[3057:3059] ## This is the object which will contain all of the transition values ## If states is where the model starts at a given time step, then ODEs is where we land ## It is the same size as the states matrix ## This is the object we we will return at the end ODEs &lt;- array(dim = c(sex_types,age_types,cigarette_types,e_cigarette_types,income_types)) ## Finally, since the model is run on one sex, which we extract here sex &lt;- parameters[2978] ## This allows us to identify which sex we are not currently modeling not_sex &lt;- 1 if(sex == 1){not_sex &lt;- 2} ## And we can assign all ODE results for the opposite sex equal to 0 ODEs[not_sex,,,,] &lt;- 0 ## ## Now we are ready to loop through our compartments and update transitions ## We are going to loop through income, e_cigarette, and age categories ## We don&#39;t need to loop through sex because the model is run separately based on sex ## Instead of looping through cigarette use, we essentially write all of our transition statements in relation to each cigarette status ## Thus, while we loop through each of the other strata, we write 3 specific transition equations, one for the never smoker category, one for current, and one for former ## This is referred to as dimensional coding, though I have seen few to no sources that go into the practice ## We have income as the outermost loop to dimish the number of times we need to call the sources and landings list (lists go slow, arrays go fast) ## We loop through each income compartment number for(income in 1:income_types){ ## We extract the sources and landings for this income compartment outside of the other loops to improve runtime sources &lt;- income_transition_sources[[income]] landings &lt;- income_transition_landings[[income]] ## Next we loop through e_cigarette status (minimize number of times we call the cig_in list) for(e_cigarette in 1:e_cigarette_types){ ## We extract the transition source values outside the next loop to improve runtime e_cig_in &lt;- cig_in[[e_cigarette]] ## Finally we loop through age for(age in 1:age_types){ ## As noted, 3 equations will be defined total, one for each of the three cigarette states. ## Prior to defining these equations we need to define the number of people moving into or out of the given compartment based on each strata ## ## Cigarette State 1: Never Smoker ## ## Age In ## The number of people aging into the compartment is defined by two terms. ## The first term is intended to capture the number of people who age out of the income group one below into the current one ## The c(0,age_transitions)[age] shifts the age_transitions appropriately such that no people in the model are able to age into the 18-24 group ## The second term is intended to capture the number of entries into the compartment (i.e. people aging from 17 to 18) ## The entries[age] ensures that entries are only added to the 18-24 compartments and the youngling_mult ensures that only the appropriate ## starting cigarette state is allowed to enter. For example, if we are running the model on never smokers, then we only want to allow model entries ## into the never smoking compartments. Entries to other compartments will be handled by other iterations of the model ageIn &lt;- states[sex,age_in[age] - 1, 1 , e_cigarette,income]*c(0,age_transitions)[age] + entries[age]*younglings[sex,e_cigarette,income]*youngling_mult[1] ## Age Out ## The number of people who will leave is the number of people in the compartment times ## the proportion of people who will age out of this group ageOut &lt;- states[sex,age,1,e_cigarette,income]*age_transitions[age] ## Income In ## Because of the staging compartments in the model ## This leads to a rather complicated set of transitions ## FOr income_level X, the income_transition_sources object ## contains a vector of all the compartments from which someone ## can transition into X from ## We start by creating a variable to store the number of income transitions into the current compartment incomeIn &lt;- 0 ## In order to calculate the number of people who transition into ## the given compartment based on income, we loop through all ## the compartments that people can transition from for(income_level in sources){ ## First, we create a modifier variable ## It is set to one in case this is not a staging compartment ## If it is a staging compartment, then the modifier is set to the staging modifier ## We have commented out the staging modifier code, however, because for this model we aren&#39;t using it ## and the if statement slows downrun time. mod &lt;- 1 ## Uncomment the following lines of code if you wish to use the staging compartment ##if(income_level != income_5_cat[income_level] &amp;&amp; income == income_5_cat[income_level]){ ## mod &lt;- staging_modifier ##} ## then the proportion of people who make the transition are the proportion of people ## in the prior compartment who make the income transition ## if it is from a staging compartment, the modifier impacts this rates incomeIn &lt;- incomeIn + states[sex,age,1,e_cigarette,income_level]*income_transitions[age,income_5_cat[income_level],income_5_cat[income]]*mod } ## Income Out ## We again need to account for the set of income compartments people in the current compartment can transition to incomeOut &lt;- 0 ## Two cases, either someone is in a non-staging compartment (income == 1-5) ## Or in a staging compartment (income = 6-13) for(income_level in landings){ mod &lt;- 1 ## If you wish to use the staging modifier variable, uncomment this code ##if(income != income_5_cat[income] &amp;&amp; income_level == income_5_cat[income]){ ## mod &lt;- staging_modifier ##} ## For a given landing, the income transition is calculated via the income transition rates incomeOut &lt;- incomeOut + states[sex,age,1,e_cigarette,income]*income_transitions[age,income_5_cat[income],income_5_cat[income_level]]*mod } ## Cigarette In ## There is no cigarette in transition for Never Smokers ## cigarette Out ## Never to Cigarette Smoker -- Initiation ## Here the number of initiations is the cigarette initiation rate times the appropriate relative risk cigaretteOut &lt;- states[sex,age,1,e_cigarette,income]*(cigarette_transitions[1,2]*rr_cigarette_initiation[sex,age,e_cigarette,income]) ## E-Cigarette Transitions ## E-Cigarette In ## The following line of code was developed to avoid the use of a costly if-else sequence ## We calculate the proportion of people who would transition from every potential e-cig category to the current compartment ## But we use the e_cig_in object to make sure we only add the one that we want ## Avoiding if-else statements has made this a slightly challenging bit of code to parse ## Mapping out each potential e-cig value on paper can help display the appropriateness e_cigaretteIn &lt;- states[sex,age,1,1,income]*(e_cigarette_transitions[1,2]*rr_e_cigarette_initiation[sex,age,1,income])*e_cig_in[1] + states[sex,age,1,2,income]*(e_cigarette_transitions[2,3]*rr_e_cigarette_cessation[sex,age,1,income])*e_cig_in[2] + states[sex,age,1,3,income]*(e_cigarette_transitions[3,2]*rr_e_cigarette_reinstatement[sex,age,1,income])*e_cig_in[3] ## E-Cigarette Out ## This is more straightforward as only one out pathway is possible from each compartment ## Take the number of people in the current compartment and apply the appropriate e_cigarette rate and RRs e_cigaretteOut &lt;- states[sex,age,1,e_cigarette,income]*(e_cigarette_transitions[e_cigarette,cig_out[e_cigarette]]*rr_e_cigarette_transitions[e_cigarette,sex,age,1,income]) ## Finally, we must account for death in the model ## We apply the death rates and excess death rates due to cigarette use to get the number of deaths death &lt;- states[sex,age,1,e_cigarette,income]*death_rates[sex,age]*excess_cigarette_death_RR[sex,1] ## ODE 1 ## Finally, we define our full equation for this compartment ## We store this value into the ODEs object which we will return ODEs[sex,age, 1, e_cigarette, income] &lt;- ageIn - ageOut + incomeIn - incomeOut + e_cigaretteIn - e_cigaretteOut - cigaretteOut - death ## ## The following two equations are defined in a nearly identical fashion, with adjustments made based upon the cigarette compartment ## Given similarities, comments throughout are minimal and earlier comments should be referenced. ## ## ## Cigarette State 2: Current Smoker ## ## Age In ageIn &lt;- states[sex,age_in[age] - 1, 2 , e_cigarette,income]*c(0,age_transitions)[age] + entries[age]*younglings[sex,e_cigarette,income]*youngling_mult[2] ## Age Out ageOut &lt;- states[sex,age,2,e_cigarette,income]*age_transitions[age] ## Income In incomeIn &lt;- 0 for(income_level in sources){ mod &lt;- 1 ## Uncomment next lines if wish to use staging modifier variable ##if(income_level != income_5_cat[income_level] &amp;&amp; income == income_5_cat[income_level]){ ## mod &lt;- staging_modifier ##} incomeIn &lt;- incomeIn + states[sex,age,2,e_cigarette,income_level]*income_transitions[age,income_5_cat[income_level],income_5_cat[income]]*mod } ## Income Out incomeOut &lt;- 0 for(income_level in landings){ mod &lt;- 1 ## Uncomment these lines if wish to use staging modifier variable ## if(income != income_5_cat[income] &amp;&amp; income_level == income_5_cat[income]){ ## mod &lt;- staging_modifier ##} incomeOut &lt;- incomeOut + states[sex,age,2,e_cigarette,income]*income_transitions[age,income_5_cat[income],income_5_cat[income_level]]*mod } ## Cigarette In ## Since this is a current smoker compartment, we can have transitions from initiation and reinstatement cigaretteIn &lt;- 0 ## First we add the number of people who initiation cigarette smoking by applying transition rate and RRs to the appropriate compartment cigaretteIn &lt;- cigaretteIn + states[sex,age,1,e_cigarette,income]*(cigarette_transitions[1,2]*rr_cigarette_initiation[sex,age,e_cigarette,income]) ## Then we do the same for the former smokers reinstating cigaretteIn &lt;- cigaretteIn + states[sex,age,3,e_cigarette,income]*(cigarette_transitions[3,2]*rr_cigarette_reinstatement[sex,age,e_cigarette,income]) ## Cigarette Out ## Cigarette Smoker to Former Smoker cigaretteOut &lt;- states[sex,age,2,e_cigarette,income]*(cigarette_transitions[2,3]*rr_cigarette_cessation[sex,age,e_cigarette,income]) ## E-Cigarette Transitions ## E-Cigarette In e_cigaretteIn &lt;- states[sex,age,2,1,income]*(e_cigarette_transitions[1,2]*rr_e_cigarette_initiation[sex,age,2,income])*e_cig_in[1] + states[sex,age,2,2,income]*(e_cigarette_transitions[2,3]*rr_e_cigarette_cessation[sex,age,2,income])*e_cig_in[2] + states[sex,age,2,3,income]*(e_cigarette_transitions[3,2]*rr_e_cigarette_reinstatement[sex,age,2,income])*e_cig_in[3] ## E-Cigarette Out e_cigaretteOut &lt;- states[sex,age,2,e_cigarette,income]*(e_cigarette_transitions[e_cigarette,cig_out[e_cigarette]]*rr_e_cigarette_transitions[e_cigarette,sex,age,2,income]) ## Death death &lt;- states[sex,age,2,e_cigarette,income]*death_rates[sex,age]*excess_cigarette_death_RR[sex,2] ## ODE 2 ODEs[sex,age, 2, e_cigarette, income] &lt;- ageIn - ageOut + incomeIn - incomeOut + e_cigaretteIn - e_cigaretteOut + cigaretteIn - cigaretteOut - death ## ## Cigarette State 3: Former Smoker ## ## Age In ageIn &lt;- states[sex,age_in[age] - 1, 3 , e_cigarette,income]*c(0,age_transitions)[age] + entries[age]*younglings[sex,e_cigarette,income]*youngling_mult[3] ## Age Out ageOut &lt;- states[sex,age,3,e_cigarette,income]*age_transitions[age] ## Income In incomeIn &lt;- 0 for(income_level in sources){ mod &lt;- 1 ## Uncomment if wish to use staging modifier variable ##if(income_level != income_5_cat[income_level] &amp;&amp; income == income_5_cat[income_level]){ ## mod &lt;- staging_modifier ##} incomeIn &lt;- incomeIn + states[sex,age,3,e_cigarette,income_level]*income_transitions[age,income_5_cat[income_level],income_5_cat[income]]*mod } ## Income Out incomeOut &lt;- 0 for(income_level in landings){ mod &lt;- 1 ## Uncomment if wish to use staging modifier ##if(income != income_5_cat[income] &amp;&amp; income_level == income_5_cat[income]){ ## mod &lt;- staging_modifier ##} incomeOut &lt;- incomeOut + states[sex,age,3,e_cigarette,income]*income_transitions[age,income_5_cat[income],income_5_cat[income_level]]*mod } ## Cigarette In cigaretteIn &lt;- 0 ## Need a flow for cessation cigaretteIn &lt;- cigaretteIn + states[sex,age,2,e_cigarette,income]*(cigarette_transitions[2,3]*rr_cigarette_cessation[sex,age,e_cigarette,income]) ## cigarette Out ## Former Smoker to Current Smoker cigaretteOut &lt;- states[sex,age,3,e_cigarette,income]*(cigarette_transitions[3,2]*rr_cigarette_reinstatement[sex,age,e_cigarette,income]) ## E-Cigarette Transitions ## E-Cigarette In e_cigaretteIn &lt;- states[sex,age,3,1,income]*(e_cigarette_transitions[1,2]*rr_e_cigarette_initiation[sex,age,3,income])*e_cig_in[1] + states[sex,age,3,2,income]*(e_cigarette_transitions[2,3]*rr_e_cigarette_cessation[sex,age,3,income])*e_cig_in[2] + states[sex,age,3,3,income]*(e_cigarette_transitions[3,2]*rr_e_cigarette_reinstatement[sex,age,3,income])*e_cig_in[3] ## E-Cigarette Out e_cigaretteOut &lt;- states[sex,age,3,e_cigarette,income]*(e_cigarette_transitions[e_cigarette,cig_out[e_cigarette]]*rr_e_cigarette_transitions[e_cigarette,sex,age,3,income]) ## Death death &lt;- states[sex,age,3,e_cigarette,income]*death_rates[sex,age]*excess_cigarette_death_RR[sex,3] ## ODE 3 ODEs[sex,age, 3, e_cigarette, income] &lt;- ageIn - ageOut + incomeIn - incomeOut + e_cigaretteIn - e_cigaretteOut + cigaretteIn - cigaretteOut - death } } } return(list(toVector(ODEs))) } "],["calibration.html", "Chapter 7 Calibration 7.1 Load the Necessary Libraries 7.2 Define Our Calibration Function 7.3 Run the Calibration", " Chapter 7 Calibration At this stage, we are almost ready to run our model. However, we want to make sure that our model is calibrated to historical data. Our model is initialized for the year 2014 and as of writing this information of cigarette use prevalence trajectories are available through 2019. While the initial starting state of the model is designed to match up with variable distributions in 2014, we also want to make sure that the model is simulating historically accurate trends. We thus aim to calibrate our model to match 3 specific historical data points: The Population Growth in 2019 should be 0.5% We shall modify the growth rate parameter The Ever Cigarette Prevalence in 2019 should be 34.9% (14.0% current + 20.9% former) We shall modify the absolute cigarette initiation rate with a modifier The Current Cigarette Use Prevalence in 2019 should be 14.0% We shall modify the absolute cigarette cessation rate with a modifier For reference, we have copied the ODE function and the toArray and toVector functions from the prior chapter into a separate file called ODE_Function.R. This is to account for a feature of R Bookdown and challenges with sourcing code from R Markdown files used to generate the book. 7.1 Load the Necessary Libraries ## Need deSolve and minpack.lm, specifically library(deSolve) library(minpack.lm) library(tidyverse) library(kableExtra) library(triangle) library(epiR) library(parallel) library(foreach) 7.2 Define Our Calibration Function We will be using a least squares solver that applies the Levenberg-Marquant algorithm. We need to define a calibration function that runs the model and then calculates the target values. The goal of this function is to minimize the total distance between the target values and the actual model performance. For this calibration function, we understand that the model is initialized in the year 2014. calib_function &lt;- function(x, parameters, states){ source(&quot;ODE_Function.R&quot;, local = T) ## ## We are calibrating 3 specific values ## The growth rate to match population change over time ## The initiation multiplier to match ever cigarette prevalence over time ## The cessation multiplier to match distribution of current/former cigarette prevalence over time ## ## Population growth rate goals is a 0.5% acceleration in 2019 ## Ever Cigarette Use Target for 2019 is 34.0% ## Current Cigarette Use Target for 2019 is 14.0% ## ## Define our targets pop_growth_2019_target &lt;- 0.005 ever_cig_prev_2019_target &lt;- .349 cig_prev_2019_target &lt;- 0.14 ## For troubleshooting can be helpful print(x) ## The x array contains the calibrated parameters ## Assign them to appropraite variables growth_rate &lt;- x[1] initiation_mod &lt;- x[2] cessation_mod &lt;- x[3] ## ## Define the states for the parallelization and for model entries ## Note that we do this prior to running the full model in the next chapter ## Because we are running 6 separate models (male/female x Never/Current/Formar at start) ## states &lt;- toArray(states) states_never_smokers &lt;- states states_never_smokers[,,c(2,3),,] &lt;- 0 states_male_never_smokers &lt;- states_never_smokers states_female_never_smokers &lt;- states_never_smokers states_male_never_smokers[2,,,,] &lt;- 0 states_female_never_smokers[1,,,,] &lt;- 0 states_current_smokers &lt;- states states_current_smokers[,,c(1,3),,] &lt;- 0 states_male_current_smokers &lt;- states_current_smokers states_female_current_smokers &lt;- states_current_smokers states_male_current_smokers[2,,,,] &lt;- 0 states_female_current_smokers[1,,,,] &lt;- 0 states_former_smokers &lt;- states states_former_smokers[,,c(1,2),,] &lt;- 0 states_male_former_smokers &lt;- states_former_smokers states_female_former_smokers &lt;- states_former_smokers states_male_former_smokers[2,,,,] &lt;- 0 states_female_former_smokers[1,,,,] &lt;- 0 ## These lists are what we will feed into the parallelization function states_by_sex_never &lt;- list(states_male_never_smokers,states_female_never_smokers) states_by_sex_current &lt;- list(states_male_current_smokers,states_female_current_smokers) states_by_sex_former &lt;- list(states_male_former_smokers,states_female_former_smokers) ## ## Next we need to define our entries into the model ## We first, set the younglings object to be just the 18-24 year olds states ## In our model at initialization, 17% are current smokers and 5% are e-cigarette users ## However, the primary driver of cigarette use change over the study period ## Is that youth have largely switched from cigarettes to e-cigarettes ## So, we flip the cigarette use and e-cigarette use cells so that our entry population ## Uses e-cigarettes at 17% and cigarettes at 5%. We also flip ever use ## younglings &lt;- states[,1,,,] for(sex in 1:2){ for(income in 1:13){ e_cig &lt;- younglings[sex,1,2,income] cig &lt;- younglings[sex,2,1,income] younglings[sex,1,2,income] &lt;- cig younglings[sex,2,1,income] &lt;- e_cig e_cig_former &lt;- younglings[sex,1,3,income] cig_former &lt;- younglings[sex,3,1,income] younglings[sex,1,3,income] &lt;- cig_former younglings[sex,3,1,income] &lt;- e_cig_former } } ## We divide by 7 because we only want 1 year worth of people (18-24 year olds = 7 years) younglings &lt;- younglings/7 ## Then like with the states, we prep this object for parallelization younglings_never_male &lt;- younglings[1,1,,] younglings_current_male &lt;- younglings[1,2,,] younglings_former_male &lt;- younglings[1,3,,] younglings_never_male &lt;- toVector(younglings_never_male) younglings_current_male &lt;- toVector(younglings_current_male) younglings_former_male &lt;- toVector(younglings_former_male) younglings_never_female &lt;- younglings[2,1,,] younglings_current_female &lt;- younglings[2,2,,] younglings_former_female &lt;- younglings[2,3,,] younglings_never_female &lt;- toVector(younglings_never_female) younglings_current_female &lt;- toVector(younglings_current_female) younglings_former_female &lt;- toVector(younglings_former_female) younglings_never &lt;- toArray(NA, dim = c(2,3,13)) younglings_never[1,,] &lt;- younglings_never_male younglings_never[2,,] &lt;- younglings_never_female younglings_never &lt;- toVector(younglings_never) younglings_current &lt;- toArray(NA, dim = c(2,3,13)) younglings_current[1,,] &lt;- younglings_current_male younglings_current[2,,] &lt;- younglings_current_female younglings_current &lt;- toVector(younglings_current) younglings_former &lt;- toArray(NA, dim = c(2,3,13)) younglings_former[1,,] &lt;- younglings_former_male younglings_former[2,,] &lt;- younglings_former_female younglings_former &lt;- toVector(younglings_former) youngling_mult_never &lt;- c(1,0,0) youngling_mult_current &lt;- c(0,1,0) youngling_mult_former &lt;- c(0,0,1) #define time -- since we are only calibrating 5 years forward, we simply run the model out 5 years t = seq(0,5, by = 1) ## ## Need to run the model, first on never smokers ## The loop containing the calls allows us to run the model in parallel for men and women ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) never_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_never[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex,younglings_never,youngling_mult_never, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) never_result[,1] &lt;- never_result[,1]/2 print(Sys.time() - start2) ## ## Current Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) current_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_current[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_current,youngling_mult_current, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) current_result[,1] &lt;- current_result[,1]/2 print(Sys.time() - start2) ## ## Former Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) former_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_former[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_former,youngling_mult_former, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) former_result[,1] &lt;- former_result[,1]/2 print(Sys.time() - start2) ## Finally, we get our results by summing the results of each of our three outputs result &lt;- never_result + current_result + former_result ## We divide the time variable by 3 because the prior step tripled the values in these cells result[,1] &lt;- result[,1]/3 ## Define the result as a data frame for easy use result &lt;- as.data.frame(result) ## Next we want to extract the populations for 2018 and 2019 res_2018 &lt;- toArray(as.numeric(result[result$time == 4,c(2:1405)])) res_2019 &lt;- toArray(as.numeric(result[result$time == 5,c(2:1405)])) ## Next we want to calculate our target variables ## The actual pop growth from 2018 to 2019 pop_growth_actual &lt;- (sum(c(res_2019)) - sum(c(res_2018)))/sum(c(res_2018)) ## The actual current cig prevalence in 2019 cig_prev_actual &lt;- sum(c(res_2019[,,2,,]))/sum(c(res_2019)) ## The actual ever cig prevalence in 2019 ever_cig_prev_actual &lt;- sum(c(res_2019[,,c(2,3),,]))/sum(c(res_2019)) ## For troubleshooting, we include the following lines: print(paste(&quot;Pop Growth is: &quot;, round(pop_growth_actual,3)*100, &quot;%&quot;,sep =&quot;&quot;)) print(paste(&quot;Current Smoker Prevalence is: &quot;, round(cig_prev_actual,3)*100, &quot;%&quot;,sep =&quot;&quot;)) print(paste(&quot;Ever Smoker Prevalence is: &quot;, round(ever_cig_prev_actual,3)*100, &quot;%&quot;,sep =&quot;&quot;)) ## We define our least squares formula formula &lt;- c((pop_growth_actual - pop_growth_2019_target), (cig_prev_actual - cig_prev_2019_target), (ever_cig_prev_actual - ever_cig_prev_2019_target)) ## We return the formula return(formula) } 7.3 Run the Calibration Finally, we run the calibration and save the results. ## Define which parameter set we want to extract parameter_set_number &lt;- &quot;One&quot; ## Load the appropraite parameter set parameter_set &lt;- read.csv(paste(&quot;Data/Parameter_Sets/Parameter_Set_&quot;,parameter_set_number,&quot;.csv&quot;,sep=&quot;&quot;), header = T)[,-c(1)] ## Load in the initial state configuration states &lt;- read.csv(paste(&quot;Data/Initial_State.csv&quot;,sep = &quot;&quot;), header = T)[,-c(1)] ## Create the vectors where we will save our results growth_rates &lt;- c() initiation_mods &lt;- c() cessation_mods &lt;- c() ## Loop through each parameter set for(sim_number in 1:nrow(parameter_set)){ ## Extract the appropriate parameters parameters &lt;- as.numeric(parameter_set[sim_number,]) ## Define the initial state for our three calibrated parameters ## The population growth is initialized to 4.63 because this value doesn&#39;t change much and is fairly static x0 &lt;- c(4.63, 1,1) ## we also want to set lower and upper bounds for these variables ## This tells the algorithms what values are permitted ## For example, we can&#39;t have negative initiation rates upper &lt;- c(20,3,3) lower &lt;- c(0,.1,.1) ## at this stage we can run the calibration function calibration_results &lt;- nls.lm(x0, lower = lower, upper = upper, fn = calib_function, parameters = parameters, states = states, control = nls.lm.control(nprint=1)) ## Finally we save our results growth_rates &lt;- c(growth_rates, calibration_results$par[1]) initiation_mods &lt;- c(initiation_mods, calibration_results$par[2]) cessation_mods &lt;- c(cessation_mods, calibration_results$par[3]) } ## We put our results in a data frame df &lt;- as.data.frame(matrix(ncol = 0, nrow = length(growth_rates))) df$growth_rates &lt;- growth_rates df$initiation_mods &lt;- initiation_mods df$cessation_mods &lt;- cessation_mods ## We output the results write.csv(df,paste(&quot;Data/Parameter_Sets/Calibration_Variables_Parameter_Set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) "],["ref.html", "Chapter 8 Run Primary Model and Income Scenario Analysis 8.1 Run Primary Model 8.2 Run High-Income Scenario Analysis", " Chapter 8 Run Primary Model and Income Scenario Analysis Now that we have our calibrated parameter sets we can go forward with actually running our model. In this chapter, we run the model and our primary scenario analysis. First, we run the model with the parameters and states as currently developed to this point. Second, we will run the model, but we will set the income and income change RRs for everyone to be the value for the &gt;$100k, stable income compartment. In the next chapter, we will then compare the results of the two models in order to calculate a population attributable fraction for the impact of income on cigarette use prevalence. 8.1 Run Primary Model 8.1.1 Load the Needed Libraries and Functions library(deSolve) library(minpack.lm) library(tidyverse) library(kableExtra) library(triangle) library(epiR) library(parallel) library(foreach) source(&quot;ODE_Function.R&quot;, local = T) 8.1.2 Initialize the Start State and Entry Object First, we want to load in the model start state and initialize the entries into the model. Essentially, around 2014 the dynamics of youth tobacco use changed a lot. E-cigarettes became the dominant tobacco product for middle and high schoolers. While this model does not focus on youth use, we do want to account for this changing dynamic. To maintain population distribution of variables, our first step is to use the distribution of 18-24 year olds in the model at t = 0 to inform entries into the model. However, to account for the change in tobacco product use, we flipped the cigarette and e-cigarette use compartments in the model. To further explain, in our initial start state, among 18-24 year olds, 17% use cigarettes, 5.5% use e-cigarettes. However, recent estimates (2019) indicate that youth cigarette prevalence is around 5% and e-cigarette use prevalence is above 20%. As such, by flipping these compartments, entries into our model more accurately reflect historical data. Additionally, we must prep the states and entries object (younglings) for parallelization. We run the model in 6 separate sub-models, modeling the population of Never Smokers, Current Smokers, and Former Smokers at t = 0 separately and then modeling each of these separately by sex. We note here that model entries are included only for the cigarette x sex combination for that model. Meaning, all never smoker-male entries occur in the never smokers-male sub-model. We do this parallelization for 1) improving run-time and 2) so we can compare the impact of income on never smokers, current smokers, and former smokers. This may inform which aspects of cigarette transitions income most affects. ## Load the state states &lt;- read.csv(&quot;Data/Initial_State.csv&quot;, header = T)[,-c(1)] ## Convert to array states &lt;- toArray(states) ## Prep the states for parallelization states_never_smokers &lt;- states states_never_smokers[,,c(2,3),,] &lt;- 0 states_male_never_smokers &lt;- states_never_smokers states_female_never_smokers &lt;- states_never_smokers states_male_never_smokers[2,,,,] &lt;- 0 states_female_never_smokers[1,,,,] &lt;- 0 states_current_smokers &lt;- states states_current_smokers[,,c(1,3),,] &lt;- 0 states_male_current_smokers &lt;- states_current_smokers states_female_current_smokers &lt;- states_current_smokers states_male_current_smokers[2,,,,] &lt;- 0 states_female_current_smokers[1,,,,] &lt;- 0 states_former_smokers &lt;- states states_former_smokers[,,c(1,2),,] &lt;- 0 states_male_former_smokers &lt;- states_former_smokers states_female_former_smokers &lt;- states_former_smokers states_male_former_smokers[2,,,,] &lt;- 0 states_female_former_smokers[1,,,,] &lt;- 0 states_by_sex_never &lt;- list(states_male_never_smokers,states_female_never_smokers) states_by_sex_current &lt;- list(states_male_current_smokers,states_female_current_smokers) states_by_sex_former &lt;- list(states_male_former_smokers,states_female_former_smokers) ## Next we generate the entries object, which we call younglings ## We start by just taking the 18-24 year old compartments younglings &lt;- states[,1,,,] ## Then we go through each compartment by iterating through sex and income ## And we flip the current smokers and current e-smokers cells ## And we flip the former smokers and former e-smoker cells ## Note that we do not flip any of the dual use or current-former-dual-use-history cells for(sex in 1:2){ for(income in 1:13){ e_cig &lt;- younglings[sex,1,2,income] cig &lt;- younglings[sex,2,1,income] younglings[sex,1,2,income] &lt;- cig younglings[sex,2,1,income] &lt;- e_cig e_cig_former &lt;- younglings[sex,1,3,income] cig_former &lt;- younglings[sex,3,1,income] younglings[sex,1,3,income] &lt;- cig_former younglings[sex,3,1,income] &lt;- e_cig_former } } ## We divide by 7 because entries represent a single year whereas the 18-24 age group covers 7 younglings &lt;- younglings/7 ## As with before, we prep the object for parallelization younglings_never_male &lt;- younglings[1,1,,] younglings_current_male &lt;- younglings[1,2,,] younglings_former_male &lt;- younglings[1,3,,] younglings_never_male &lt;- toVector(younglings_never_male) younglings_current_male &lt;- toVector(younglings_current_male) younglings_former_male &lt;- toVector(younglings_former_male) younglings_never_female &lt;- younglings[2,1,,] younglings_current_female &lt;- younglings[2,2,,] younglings_former_female &lt;- younglings[2,3,,] younglings_never_female &lt;- toVector(younglings_never_female) younglings_current_female &lt;- toVector(younglings_current_female) younglings_former_female &lt;- toVector(younglings_former_female) younglings_never &lt;- toArray(NA, dim = c(2,3,13)) younglings_never[1,,] &lt;- younglings_never_male younglings_never[2,,] &lt;- younglings_never_female younglings_never &lt;- toVector(younglings_never) younglings_current &lt;- toArray(NA, dim = c(2,3,13)) younglings_current[1,,] &lt;- younglings_current_male younglings_current[2,,] &lt;- younglings_current_female younglings_current &lt;- toVector(younglings_current) younglings_former &lt;- toArray(NA, dim = c(2,3,13)) younglings_former[1,,] &lt;- younglings_former_male younglings_former[2,,] &lt;- younglings_former_female younglings_former &lt;- toVector(younglings_former) youngling_mult_never &lt;- c(1,0,0) youngling_mult_current &lt;- c(0,1,0) youngling_mult_former &lt;- c(0,0,1) 8.1.3 Load Appropraite Parameters ## Set the parameter set name to load in parameter_set_number &lt;- &quot;One&quot; ## Load the parameter set parameter_set &lt;- read.csv(paste(&quot;Data/Parameter_Sets/Parameter_Set_&quot;,parameter_set_number,&quot;.csv&quot;,sep=&quot;&quot;), header = T)[,-c(1)] ## Load the calibrated parameters from the prior chapter calibrated_parameters &lt;- read.csv(paste(&quot;Data/Parameter_Sets/Calibration_Variables_Parameter_Set_&quot;,parameter_set_number,&quot;.csv&quot;,sep=&quot;&quot;)) 8.1.4 Actually Run the Model ## We initialize the results ## We initialize full results and sub-results so that we may look at results based on initial cigarette use full_results &lt;- NA full_results_never &lt;- NA full_results_current &lt;- NA full_results_former &lt;- NA ## We loop through each parameter set for(sim_number in 1:nrow(parameter_set)){ print(sim_number) ## Extract the parameters parameters &lt;- as.numeric(parameter_set[sim_number,]) ## Extract the calibraters calibraters &lt;- calibrated_parameters[sim_number,] growth_rate &lt;- calibraters$growth_rates[1] initiation_mod &lt;- calibraters$initiation_mods[1] cessation_mod &lt;- calibraters$cessation_mods[1] ## Set the model time-span t = seq(0,10, by = 1) ## ## Need to run the model ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) never_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_never[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex,younglings_never,youngling_mult_never, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) never_result[,1] &lt;- never_result[,1]/2 print(Sys.time() - start2) ## ## Current Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) current_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_current[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_current,youngling_mult_current, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) current_result[,1] &lt;- current_result[,1]/2 print(Sys.time() - start2) ## ## Former Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) former_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_former[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_former,youngling_mult_former, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) former_result[,1] &lt;- former_result[,1]/2 print(Sys.time() - start2) ## Finally, we merge the results of all three result &lt;- never_result + current_result + former_result ## We divide the time column by three because we added the three columns together result[,1] &lt;- result[,1]/3 ## We convert the objects into data frames and get ready to store them result &lt;- as.data.frame(result) result$simulation_number &lt;- sim_number never_result &lt;- as.data.frame(never_result) never_result$simulation_number &lt;- sim_number current_result &lt;- as.data.frame(current_result) current_result$simulation_number &lt;- sim_number former_result &lt;- as.data.frame(former_result) former_result$simulation_number &lt;- sim_number ## Finally, we add the results of this iteration to the full set of results if(is.na(full_results)){ full_results &lt;- as.data.frame(result) full_results_never &lt;- as.data.frame(never_result) full_results_current &lt;- as.data.frame(current_result) full_results_former &lt;- as.data.frame(former_result) }else{ full_results &lt;- rbind(full_results, result) full_results_never &lt;- rbind(full_results_never, never_result) full_results_current &lt;- rbind(full_results_current, current_result) full_results_former &lt;- rbind(full_results_former, former_result) } } ## Last, we save our results write.csv(full_results, paste(&quot;Results/Baseline_Model_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_never, paste(&quot;Results/Baseline_Model_Never_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_current, paste(&quot;Results/Baseline_Model_Current_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_former, paste(&quot;Results/Baseline_Model_Former_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) 8.2 Run High-Income Scenario Analysis In order to determine the population attributable fraction of income on cigarette use prevalence, we run the model and assign income relative risks for cigarette and e-cigarette transitions to be the relative risk of being in the &gt;$100k, stable compartment. By doing so, we expose everyone to the most protective income status and see how this impacts cigarette use. We may understand this model as attempting to capture the impact of providing everyone the most protective income status (i.e. best case scenario for income level impacting cigarette use). Since our model applies RRs which have the multiplied RRs across each strata, we will need to loop through and modify the RRs for each strata-combination accordingly. ## Load the number of levels for each strata ## We will need this for modifying RRs sex_types &lt;- 2 age_types &lt;- 6 cigarette_types &lt;- 3 e_cigarette_types &lt;- 3 income_types &lt;- 13 ## Need to load the income and income change relative risks to appropriately modify overall RRs for each transition income_RRs &lt;- read.csv(paste(&quot;Data/Parameter_Sets/Income_RRs_Parameter_Set_&quot;,parameter_set_number,&quot;.csv&quot;,sep=&quot;&quot;), header = T)[,-c(1)] income_change_RRs &lt;- read.csv(paste(&quot;Data/Parameter_Sets/Income_Change_RRs_Parameter_Set_&quot;,parameter_set_number,&quot;.csv&quot;,sep = &quot;&quot;), header = T)[,-c(1)] ## Helper objects for applying RRs appropriately income_5_cat &lt;- c(1,2,3,4,5,1,2,3,4,2,3,4,5) income_change_3_cat &lt;- c(1,1,1,1,1,2,2,2,2,3,3,3,3) ## Initialize objects to store the results full_results &lt;- NA full_results_never &lt;- NA full_results_current &lt;- NA full_results_former &lt;- NA for(sim_number in 1:nrow(parameter_set)){ ## Select the correct paramters parameters &lt;- as.numeric(parameter_set[sim_number,]) ## Select the correct calibraters calibraters &lt;- calibrated_parameters[sim_number,] growth_rate &lt;- calibraters$growth_rates[1] initiation_mod &lt;- calibraters$initiation_mods[1] cessation_mod &lt;- calibraters$cessation_mods[1] ## NExt we need to extract the income RRs for modifying overall RRs income_RR &lt;- as.numeric(income_RRs[sim_number,]) rr_cigarette_initiation_income_point_estimates_sample &lt;- income_RR[1:5] rr_cigarette_cessation_income_point_estimates_sample &lt;- income_RR[6:10] rr_cigarette_reinstatement_income_point_estimates_sample &lt;- income_RR[11:15] rr_e_cigarette_initiation_income_point_estimates_sample &lt;- income_RR[16:20] rr_e_cigarette_cessation_income_point_estimates_sample &lt;- income_RR[21:25] rr_e_cigarette_reinstatement_income_point_estimates_sample &lt;- income_RR[26:30] ## And we need to extract the income change RRs for modigying overall RRs income_change_RR &lt;- as.numeric(income_change_RRs[sim_number,]) rr_cigarette_initiation_income_change_point_estimates_sample &lt;- income_change_RR[1:3] rr_cigarette_cessation_income_change_point_estimates_sample &lt;- income_change_RR[4:6] rr_cigarette_reinstatement_income_change_point_estimates_sample &lt;- income_change_RR[7:9] rr_e_cigarette_initiation_income_change_point_estimates_sample &lt;- income_change_RR[10:12] rr_e_cigarette_cessation_income_change_point_estimates_sample &lt;- income_change_RR[13:15] rr_e_cigarette_reinstatement_income_change_point_estimates_sample &lt;- income_change_RR[16:18] ## We extract the parameters that we need to modify rr_cigarette_initiation &lt;- toArray(parameters[170:637], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_cessation &lt;- toArray(parameters[638:1105], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_cigarette_reinstatement &lt;- toArray(parameters[1106:1573], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_initiation &lt;- toArray(parameters[1574:2041], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_cessation &lt;- toArray(parameters[2042:2509], dim = c(sex_types,age_types,e_cigarette_types,income_types)) rr_e_cigarette_reinstatement &lt;- toArray(parameters[2510:2977], dim = c(sex_types,age_types,e_cigarette_types,income_types)) ## First we will modigy the cigarette transition RRs ## We loop through each combination of the other 4 strata to do so for(sex in 1:sex_types){ for(age in 1:age_types){ for(e_cig in 1:e_cigarette_types){ for(income in 1:income_types){ ## For each transition, we divide the full transition RR by the income and income change specific RRs ## We then multiply by the hi income RR (ie rr_cigarette_initiation_income_point_estimates_sample[5]) ## We don&#39;t multiply for the income change because we are assigning to the referent group where RR = 1 rr_cigarette_initiation[sex,age,e_cig,income] &lt;- rr_cigarette_initiation_income_point_estimates_sample[5]*(rr_cigarette_initiation[sex,age,e_cig,income]/(rr_cigarette_initiation_income_point_estimates_sample[income_5_cat[income]]*rr_cigarette_initiation_income_change_point_estimates_sample[income_change_3_cat[income]])) rr_cigarette_cessation[sex,age,e_cig,income] &lt;- rr_cigarette_cessation_income_point_estimates_sample[5]*(rr_cigarette_cessation[sex,age,e_cig,income]/(rr_cigarette_cessation_income_point_estimates_sample[income_5_cat[income]]*rr_cigarette_cessation_income_change_point_estimates_sample[income_change_3_cat[income]])) rr_cigarette_reinstatement[sex,age,e_cig,income] &lt;- rr_cigarette_reinstatement_income_point_estimates_sample[5]*(rr_cigarette_reinstatement[sex,age,e_cig,income]/(rr_cigarette_reinstatement_income_point_estimates_sample[income_5_cat[income]]*rr_cigarette_reinstatement_income_change_point_estimates_sample[income_change_3_cat[income]])) } } } } ## We repeat this process for e-cigarette use as well. for(sex in 1:sex_types){ for(age in 1:age_types){ for(cig in 1:cigarette_types){ for(income in 1:income_types){ rr_e_cigarette_initiation[sex,age,cig,income] &lt;- rr_e_cigarette_initiation_income_point_estimates_sample[5]*(rr_e_cigarette_initiation[sex,age,cig,income]/(rr_e_cigarette_initiation_income_point_estimates_sample[income_5_cat[income]]*rr_e_cigarette_initiation_income_change_point_estimates_sample[income_change_3_cat[income]])) rr_e_cigarette_cessation[sex,age,cig,income] &lt;- rr_e_cigarette_cessation_income_point_estimates_sample[5]*(rr_e_cigarette_cessation[sex,age,cig,income]/(rr_e_cigarette_cessation_income_point_estimates_sample[income_5_cat[income]]*rr_e_cigarette_cessation_income_change_point_estimates_sample[income_change_3_cat[income]])) rr_e_cigarette_reinstatement[sex,age,cig,income] &lt;- rr_e_cigarette_reinstatement_income_point_estimates_sample[5]*(rr_e_cigarette_reinstatement[sex,age,cig,income]/(rr_e_cigarette_reinstatement_income_point_estimates_sample[income_5_cat[income]]*rr_e_cigarette_reinstatement_income_change_point_estimates_sample[income_change_3_cat[income]])) } } } } ## We then reassign the values back into the parameter set ## Now we are ready to run the model as before parameters[170:637] &lt;- rr_cigarette_initiation parameters[638:1105] &lt;- rr_cigarette_cessation parameters[1106:1573] &lt;- rr_cigarette_reinstatement parameters[1574:2041] &lt;- rr_e_cigarette_initiation parameters[2042:2509] &lt;- rr_e_cigarette_cessation parameters[2510:2977] &lt;- rr_e_cigarette_reinstatement t = seq(0,10, by = 1) ## ## Need to run the model ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) never_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_never[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex,younglings_never,youngling_mult_never, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) never_result[,1] &lt;- never_result[,1]/2 print(Sys.time() - start2) ## ## Current Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) current_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_current[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_current,youngling_mult_current, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) current_result[,1] &lt;- current_result[,1]/2 print(Sys.time() - start2) ## ## Former Smokers ## start2 &lt;- Sys.time() cl &lt;- parallel::makeCluster(2) doParallel::registerDoParallel(cl) former_result &lt;- foreach::foreach(model_sex = 1:2, .combine=&quot;+&quot;) %dopar% { deSolve::ode(y = toVector(states_by_sex_former[[model_sex]]), times = t, func = ODE_function, parms = c(parameters,model_sex, younglings_former,youngling_mult_former, growth_rate, initiation_mod, cessation_mod)) } parallel::stopCluster(cl) former_result[,1] &lt;- former_result[,1]/2 print(Sys.time() - start2) result &lt;- never_result + current_result + former_result result[,1] &lt;- result[,1]/3 result &lt;- as.data.frame(result) result$simulation_number &lt;- sim_number never_result &lt;- as.data.frame(never_result) never_result$simulation_number &lt;- sim_number current_result &lt;- as.data.frame(current_result) current_result$simulation_number &lt;- sim_number former_result &lt;- as.data.frame(former_result) former_result$simulation_number &lt;- sim_number if(is.na(full_results)){ full_results &lt;- as.data.frame(result) full_results_never &lt;- as.data.frame(never_result) full_results_current &lt;- as.data.frame(current_result) full_results_former &lt;- as.data.frame(former_result) }else{ full_results &lt;- rbind(full_results, result) full_results_never &lt;- rbind(full_results_never, never_result) full_results_current &lt;- rbind(full_results_current, current_result) full_results_former &lt;- rbind(full_results_former, former_result) } } ## Output the results write.csv(full_results, paste(&quot;Results/Scenario_#2_High_Income_RRs_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_never, paste(&quot;Results/Scenario_#2_Never_High_Income_RRs_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_current, paste(&quot;Results/Scenario_#2_Current_High_Income_RRs_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) write.csv(full_results_former, paste(&quot;Results/Scenario_#2_Former_High_Income_RRs_Results_parameter_set_&quot;,as.character(parameter_set_number),&quot;.csv&quot;,sep=&quot;&quot;)) "],["results.html", "Chapter 9 Results 9.1 Load Data We Need 9.2 Calibration Confirmation 9.3 Hi-Income Scenario", " Chapter 9 Results Now that we have run the model and our primary scenario analyses, we want to look at the results. 9.1 Load Data We Need 9.2 Calibration Confirmation First, we want to make sure that our calibrations worked properly. We calibrated to ensure our model accurately reflected on population growth and changes in cigarette use prevalence. The plots below display the modeled data versus actual historical data to confirm calibrations. 9.2.1 Population Growth 9.2.2 Cigarette Use 9.3 Hi-Income Scenario 9.3.1 Cigarette Use Prevalence 9.3.2 Population Attributable Fraction "]]
